From c0bba221dbdca965c4e15ef33f62194dc666e325 Mon Sep 17 00:00:00 2001
From: Andrei Safronov <safronov@espressif.com>
Date: Wed, 5 Apr 2023 00:59:27 +0300
Subject: [PATCH 099/140] [Xtensa] Implement support of the sysroot

---
 clang/lib/Driver/ToolChains/Xtensa.cpp        | 211 +++++++++++-------
 clang/lib/Driver/ToolChains/Xtensa.h          |   3 +
 .../xtensa-esp32-elf/include/c++/8.4.0/.keep  |   0
 clang/test/Driver/xtensa-toolchain.c          |  32 +++
 4 files changed, 162 insertions(+), 84 deletions(-)
 create mode 100644 clang/test/Driver/Inputs/multilib_xtensa_tree/xtensa-esp32-elf/include/c++/8.4.0/.keep

diff --git a/clang/lib/Driver/ToolChains/Xtensa.cpp b/clang/lib/Driver/ToolChains/Xtensa.cpp
index c01bdc0a8499..362f2bc2382f 100644
--- a/clang/lib/Driver/ToolChains/Xtensa.cpp
+++ b/clang/lib/Driver/ToolChains/Xtensa.cpp
@@ -50,57 +50,80 @@ XtensaToolChain::XtensaToolChain(const Driver &D, const llvm::Triple &Triple,
   }
 
   GCCInstallation.init(Triple, Args, ExtraAliases);
-  if (!GCCInstallation.isValid()) {
-    llvm_unreachable("Unexpected Xtensa GCC toolchain version");
-  }
-
-  Multilibs = GCCInstallation.getMultilibs();
-  SelectedMultilib = GCCInstallation.getMultilib();
-
-  GCCLibAndIncVersion = GCCInstallation.getVersion().Text;
-  GCCToolchainName = GCCInstallation.getTriple().str();
-  SmallString<128> Path(GCCInstallation.getParentLibPath());
-  llvm::sys::path::append(Path, "..");
-  GCCToolchainDir = Path.c_str();
-
-  for (auto *A : Args) {
-    std::string Str = A->getAsString(Args);
-    if (!Str.compare("-mlongcalls"))
-      A->claim();
-    if (!Str.compare("-fno-tree-switch-conversion"))
-      A->claim();
+  if (GCCInstallation.isValid()) {
+    for (auto *A : Args) {
+      std::string Str = A->getAsString(Args);
+      if (!Str.compare("-mlongcalls"))
+        A->claim();
+      if (!Str.compare("-fno-tree-switch-conversion"))
+        A->claim();
+
+      // Currently don't use integrated assembler for assembler input files
+      if ((IsIntegratedAsm) && (Str.length() > 2)) {
+        std::string ExtSubStr = Str.substr(Str.length() - 2);
+        if (!ExtSubStr.compare(".s"))
+          IsIntegratedAsm = false;
+        if (!ExtSubStr.compare(".S"))
+          IsIntegratedAsm = false;
+      }
+    }
 
     // Currently don't use integrated assembler for assembler input files
-    if ((IsIntegratedAsm) && (Str.length() > 2)) {
-      std::string ExtSubStr = Str.substr(Str.length() - 2);
-      if (!ExtSubStr.compare(".s"))
+    if (IsIntegratedAsm) {
+      if (Args.getLastArgValue(options::OPT_x).equals("assembler"))
         IsIntegratedAsm = false;
-      if (!ExtSubStr.compare(".S"))
+
+      if (Args.getLastArgValue(options::OPT_x).equals("assembler-with-cpp"))
         IsIntegratedAsm = false;
     }
-  }
 
-  // Currently don't use integrated assembler for assembler input files
-  if (IsIntegratedAsm) {
-    if (Args.getLastArgValue(options::OPT_x).equals("assembler"))
-      IsIntegratedAsm = false;
-
-    if (Args.getLastArgValue(options::OPT_x).equals("assembler-with-cpp"))
-      IsIntegratedAsm = false;
+    Multilibs = GCCInstallation.getMultilibs();
+    SelectedMultilib = GCCInstallation.getMultilib();
+
+    GCCLibAndIncVersion = GCCInstallation.getVersion().Text;
+    GCCToolchainName = GCCInstallation.getTriple().str();
+    SmallString<128> Path(GCCInstallation.getParentLibPath());
+    llvm::sys::path::append(Path, "..");
+    GCCToolchainDir = Path.c_str();
+
+    SmallString<128> Libs1(GCCToolchainDir);
+    llvm::sys::path::append(Libs1, "lib", "gcc", GCCToolchainName,
+                            GCCLibAndIncVersion);
+    if (!SelectedMultilib.gccSuffix().empty())
+      llvm::sys::path::append(Libs1, SelectedMultilib.gccSuffix());
+    getFilePaths().push_back(Libs1.c_str());
+
+    SmallString<128> Libs2(GCCToolchainDir);
+    llvm::sys::path::append(Libs2, GCCToolchainName, "lib");
+    if (!SelectedMultilib.gccSuffix().empty())
+      llvm::sys::path::append(Libs2, SelectedMultilib.gccSuffix());
+    getFilePaths().push_back(Libs2.c_str());
+
+    ToolChain::path_list &PPaths = getProgramPaths();
+    // Multilib cross-compiler GCC installations put ld in a triple-prefixed
+    // directory of the GCC installation parent dir.
+    StringRef ParentDir = llvm::sys::path::parent_path(GCCInstallation.getParentLibPath());
+
+    SmallString<128> PathTripleBin(ParentDir);
+    llvm::sys::path::append(PathTripleBin, GCCInstallation.getTriple().str());
+    llvm::sys::path::append(PathTripleBin, "bin");
+    PPaths.push_back(PathTripleBin.c_str());
+
+    SmallString<128> PathBin(ParentDir);
+    llvm::sys::path::append(PathBin, "bin");
+    PPaths.push_back(PathBin.c_str());
+
+    if (!getDriver().SysRoot.empty()) {
+      SmallString<128> SysRoot(computeSysRoot());
+      llvm::sys::path::append(SysRoot, "lib");
+      getFilePaths().push_back(SysRoot.c_str());
+    }
+  } else {
+    getProgramPaths().push_back(D.Dir);
+    SmallString<128> SysRoot(computeSysRoot());
+    llvm::sys::path::append(SysRoot, "lib");
+    getFilePaths().push_back(SysRoot.c_str());
   }
-
-  SmallString<128> Libs1(GCCToolchainDir);
-  llvm::sys::path::append(Libs1, "lib", "gcc", GCCToolchainName,
-                          GCCLibAndIncVersion);
-  if (!SelectedMultilib.gccSuffix().empty())
-    llvm::sys::path::append(Libs1, SelectedMultilib.gccSuffix());
-  getFilePaths().push_back(Libs1.c_str());
-
-  SmallString<128> Libs2(GCCToolchainDir);
-  llvm::sys::path::append(Libs2, GCCToolchainName, "lib");
-  if (!SelectedMultilib.gccSuffix().empty())
-    llvm::sys::path::append(Libs2, SelectedMultilib.gccSuffix());
-  getFilePaths().push_back(Libs2.c_str());
 }
 
 Tool *XtensaToolChain::buildLinker() const {
@@ -117,18 +140,25 @@ void XtensaToolChain::AddClangSystemIncludeArgs(const ArgList &DriverArgs,
       DriverArgs.hasArg(options::OPT_nostdlibinc))
     return;
 
-  if (!GCCInstallation.isValid())
-    return;
-
-  SmallString<128> Path1(getDriver().ResourceDir);
-  llvm::sys::path::append(Path1, "include");
-  SmallString<128> Path2(GCCToolchainDir);
-  llvm::sys::path::append(Path2, GCCToolchainName, "sys-include");
-  SmallString<128> Path3(GCCToolchainDir);
-  llvm::sys::path::append(Path3, GCCToolchainName, "include");
-
-  const StringRef Paths[] = {Path1, Path2, Path3};
-  addSystemIncludes(DriverArgs, CC1Args, Paths);
+  if (!getDriver().SysRoot.empty()) {
+    SmallString<128> Dir(getDriver().SysRoot);
+    llvm::sys::path::append(Dir, "include");
+    addSystemInclude(DriverArgs, CC1Args, Dir.str());
+  } else if (GCCInstallation.isValid()) {
+    SmallString<128> Path1(getDriver().ResourceDir);
+    llvm::sys::path::append(Path1, "include");
+    SmallString<128> Path2(GCCToolchainDir);
+    llvm::sys::path::append(Path2, GCCToolchainName, "sys-include");
+    SmallString<128> Path3(GCCToolchainDir);
+    llvm::sys::path::append(Path3, GCCToolchainName, "include");
+
+    const StringRef Paths[] = {Path1, Path2, Path3};
+    addSystemIncludes(DriverArgs, CC1Args, Paths);
+  } else {
+    SmallString<128> Dir(computeSysRoot());
+    llvm::sys::path::append(Dir, "include");
+    addSystemInclude(DriverArgs, CC1Args, Dir.str());
+  }
 }
 
 void XtensaToolChain::addLibStdCxxIncludePaths(
@@ -137,17 +167,32 @@ void XtensaToolChain::addLibStdCxxIncludePaths(
   if (!GCCInstallation.isValid())
     return;
 
-  SmallString<128> BaseDir(GCCToolchainDir);
-  llvm::sys::path::append(BaseDir, GCCToolchainName, "include", "c++",
-                          GCCLibAndIncVersion);
-  SmallString<128> TargetDir(BaseDir);
-  llvm::sys::path::append(TargetDir, GCCToolchainName);
-  SmallString<128> TargetDirBackward(BaseDir);
-  llvm::sys::path::append(TargetDirBackward, "backward");
-
-  addLibStdCXXIncludePaths(BaseDir, "", "", DriverArgs, CC1Args);
-  addLibStdCXXIncludePaths(TargetDir, "", "", DriverArgs, CC1Args);
-  addLibStdCXXIncludePaths(TargetDirBackward, "", "", DriverArgs, CC1Args);
+  const GCCVersion &Version = GCCInstallation.getVersion();
+  StringRef TripleStr = GCCInstallation.getTriple().str();
+  addLibStdCXXIncludePaths(computeSysRoot() + "/include/c++/" + Version.Text,
+                           TripleStr, "", DriverArgs, CC1Args);
+}
+
+std::string XtensaToolChain::computeSysRoot() const {
+  if (!getDriver().SysRoot.empty())
+    return getDriver().SysRoot;
+
+  SmallString<128> SysRootDir;
+  if (GCCInstallation.isValid()) {
+    StringRef LibDir = GCCInstallation.getParentLibPath();
+    StringRef TripleStr = GCCInstallation.getTriple().str();
+    llvm::sys::path::append(SysRootDir, LibDir, "..", TripleStr);
+  } else {
+    // Use the triple as provided to the driver. Unlike the parsed triple
+    // this has not been normalized to always contain every field.
+    llvm::sys::path::append(SysRootDir, getDriver().Dir, "..",
+                            getDriver().getTargetTriple());
+  }
+
+  if (!llvm::sys::fs::exists(SysRootDir))
+    return std::string();
+
+  return std::string(SysRootDir.str());
 }
 
 ToolChain::CXXStdlibType
@@ -184,9 +229,6 @@ void tools::xtensa::Assembler::ConstructJob(Compilation &C, const JobAction &JA,
   const auto &TC =
       static_cast<const toolchains::XtensaToolChain &>(getToolChain());
 
-  if (TC.GCCToolchainName == "")
-    llvm_unreachable("Unable to find Xtensa GCC assembler");
-
   claimNoWarnArgs(Args);
   ArgStringList CmdArgs;
 
@@ -230,17 +272,18 @@ void xtensa::Linker::ConstructJob(Compilation &C, const JobAction &JA,
   bool WantCRTs =
       !Args.hasArg(options::OPT_nostdlib, options::OPT_nostartfiles);
   const auto &ToolChain =
-      static_cast<const toolchains::XtensaToolChain &>(getToolChain());  
+      static_cast<const toolchains::XtensaToolChain &>(getToolChain());
+  const Driver &D = ToolChain.getDriver();
 
-  if (ToolChain.GCCToolchainName == "")
-    llvm_unreachable("Unable to find Xtensa GCC linker");
+  if (!D.SysRoot.empty())
+    CmdArgs.push_back(Args.MakeArgString("--sysroot=" + D.SysRoot));
 
-  if (!Args.getLastArgValue(options::OPT_fuse_ld_EQ).empty()) {
-    Linker.assign(ToolChain.GetLinkerPath());
-  } else {
+  if (ToolChain.GCCToolchainName != "") {
     Linker.assign(ToolChain.GCCToolchainDir);
     llvm::sys::path::append(Linker, "bin",
                             ToolChain.GCCToolchainName + "-" + getShortName());
+  } else {
+    Linker.assign(ToolChain.GetLinkerPath());
   }
 
   const char *crtbegin, *crtend;
@@ -249,17 +292,17 @@ void xtensa::Linker::ConstructJob(Compilation &C, const JobAction &JA,
     crtbegin = "crtbegin.o";
     crtend = "crtend.o";
   } else {
-    assert (RuntimeLib == ToolChain::RLT_CompilerRT);
+    assert(RuntimeLib == ToolChain::RLT_CompilerRT);
     crtbegin = ToolChain.getCompilerRTArgString(Args, "crtbegin",
                                                 ToolChain::FT_Object);
-    crtend = ToolChain.getCompilerRTArgString(Args, "crtend",
-                                              ToolChain::FT_Object);
+    crtend =
+        ToolChain.getCompilerRTArgString(Args, "crtend", ToolChain::FT_Object);
   }
 
   if (WantCRTs) {
     // TODO: The crt0.o is not used for esp targets, but maybe used in
     // future for other vendors
-    //CmdArgs.push_back(Args.MakeArgString(ToolChain.GetFilePath("crt0.o")));
+    // CmdArgs.push_back(Args.MakeArgString(ToolChain.GetFilePath("crt0.o")));
     CmdArgs.push_back(Args.MakeArgString(ToolChain.GetFilePath(crtbegin)));
   }
 
@@ -270,7 +313,7 @@ void xtensa::Linker::ConstructJob(Compilation &C, const JobAction &JA,
   Args.AddAllArgs(CmdArgs,
                   {options::OPT_T_Group, options::OPT_e, options::OPT_s,
                    options::OPT_t, options::OPT_u_Group});
-  
+
   if (!Args.hasArg(options::OPT_nostdlib) &&
       !Args.hasArg(options::OPT_nodefaultlibs)) {
     if (ToolChain.ShouldLinkCXXStdlib(Args))
@@ -283,9 +326,9 @@ void xtensa::Linker::ConstructJob(Compilation &C, const JobAction &JA,
 
   CmdArgs.push_back("-o");
   CmdArgs.push_back(Output.getFilename());
-  C.addCommand(std::make_unique<Command>(
-      JA, *this, ResponseFileSupport::AtFileCurCP(), Args.MakeArgString(Linker), 
-      CmdArgs, Inputs));
+  C.addCommand(
+      std::make_unique<Command>(JA, *this, ResponseFileSupport::AtFileCurCP(),
+                                Args.MakeArgString(Linker), CmdArgs, Inputs));
 }
 
 // Get features by CPU name
diff --git a/clang/lib/Driver/ToolChains/Xtensa.h b/clang/lib/Driver/ToolChains/Xtensa.h
index d645b55b5476..8f3ed74923ba 100644
--- a/clang/lib/Driver/ToolChains/Xtensa.h
+++ b/clang/lib/Driver/ToolChains/Xtensa.h
@@ -47,6 +47,9 @@ public:
   std::string GCCLibAndIncVersion = "";
   std::string GCCToolchainName = "";
   std::string GCCToolchainDir = "";
+
+private:
+  std::string computeSysRoot() const override;
 };
 
 } // end namespace toolchains
diff --git a/clang/test/Driver/Inputs/multilib_xtensa_tree/xtensa-esp32-elf/include/c++/8.4.0/.keep b/clang/test/Driver/Inputs/multilib_xtensa_tree/xtensa-esp32-elf/include/c++/8.4.0/.keep
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/clang/test/Driver/xtensa-toolchain.c b/clang/test/Driver/xtensa-toolchain.c
index aa753abcf636..7cf4f151de2f 100644
--- a/clang/test/Driver/xtensa-toolchain.c
+++ b/clang/test/Driver/xtensa-toolchain.c
@@ -91,3 +91,35 @@
 // C-XTENSA-ESP32S3-BAREMETAL-RTTI: "{{.*}}Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32s3-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}bin{{/|\\\\}}xtensa-esp32s3-elf-ld"
 // C-XTENSA-ESP32S3-BAREMETAL-RTTI: "-L{{.*}}/Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32s3-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}lib{{/|\\\\}}gcc{{/|\\\\}}xtensa-esp32s3-elf{{/|\\\\}}8.4.0"
 // C-XTENSA-ESP32S3-BAREMETAL-RTTI: "-L{{.*}}/Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32s3-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}xtensa-esp32s3-elf{{/|\\\\}}lib"
+
+// RUN: %clang %s -### -no-canonical-prefixes \
+// RUN:   -target xtensa-esp-elf -mcpu=esp32 --rtlib=platform \
+// RUN:   --gcc-toolchain=%S/Inputs/multilib_xtensa_tree \
+// RUN:   --sysroot=%S/Inputs/multilib_xtensa_tree/xtensa-esp32-elf 2>&1 \
+// RUN:   | FileCheck -check-prefix=C-XTENSA-ESP32-SYSROOT-BAREMETAL %s
+
+// C-XTENSA-ESP32-SYSROOT-BAREMETAL: "{{.*}}Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}bin{{/|\\\\}}xtensa-esp32-elf-ld"
+// C-XTENSA-ESP32-SYSROOT-BAREMETAL: "--sysroot={{.*}}/Inputs/multilib_xtensa_tree/xtensa-esp32-elf"
+// C-XTENSA-ESP32-SYSROOT-BAREMETAL: "-L{{.*}}/Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}lib{{/|\\\\}}gcc{{/|\\\\}}xtensa-esp32-elf{{/|\\\\}}8.4.0/no-rtti"
+// C-XTENSA-ESP32-SYSROOT-BAREMETAL: "-L{{.*}}/Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}xtensa-esp32-elf{{/|\\\\}}lib/no-rtti"
+
+// RUN: %clang++ %s -### -no-canonical-prefixes \
+// RUN:   -target xtensa-esp-elf -mcpu=esp32 -stdlib=libstdc++ --rtlib=platform \
+// RUN:   --gcc-toolchain=%S/Inputs/multilib_xtensa_tree 2>&1 \
+// RUN:   | FileCheck -check-prefix=CXX-XTENSA-ESP32-BAREMETAL %s
+
+// CXX-XTENSA-ESP32-BAREMETAL: "-internal-isystem" "{{.*}}Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}xtensa-esp32-elf/include/c++{{/|\\\\}}8.4.0"
+// CXX-XTENSA-ESP32-BAREMETAL: "{{.*}}Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}bin{{/|\\\\}}xtensa-esp32-elf-ld"
+// CXX-XTENSA-ESP32-BAREMETAL: "-L{{.*}}/Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}lib{{/|\\\\}}gcc{{/|\\\\}}xtensa-esp32-elf{{/|\\\\}}8.4.0/no-rtti"
+// CXX-XTENSA-ESP32-BAREMETAL: "-L{{.*}}/Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}xtensa-esp32-elf{{/|\\\\}}lib/no-rtti"
+
+// RUN: %clang++ %s -### -no-canonical-prefixes \
+// RUN:   -target xtensa-esp-elf -mcpu=esp32 -stdlib=libstdc++ --rtlib=platform \
+// RUN:   --gcc-toolchain=%S/Inputs/multilib_xtensa_tree \
+// RUN:   --sysroot=%S/Inputs/multilib_xtensa_tree/xtensa-esp32-elf 2>&1 \
+// RUN:   | FileCheck -check-prefix=CXX-XTENSA-ESP32-SYSROOT-BAREMETAL %s
+
+// CXX-XTENSA-ESP32-SYSROOT-BAREMETAL: "-internal-isystem" "{{.*}}Inputs/multilib_xtensa_tree/xtensa-esp32-elf/include/c++/8.4.0"
+// CXX-XTENSA-ESP32-SYSROOT-BAREMETAL: "{{.*}}Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}bin{{/|\\\\}}xtensa-esp32-elf-ld"
+// CXX-XTENSA-ESP32-SYSROOT-BAREMETAL: "-L{{.*}}/Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}lib{{/|\\\\}}gcc{{/|\\\\}}xtensa-esp32-elf{{/|\\\\}}8.4.0/no-rtti"
+// CXX-XTENSA-ESP32-SYSROOT-BAREMETAL: "-L{{.*}}/Inputs/multilib_xtensa_tree/lib/gcc/xtensa-esp32-elf/8.4.0/../../..{{/|\\\\}}..{{/|\\\\}}xtensa-esp32-elf{{/|\\\\}}lib/no-rtti"
-- 
2.40.1

