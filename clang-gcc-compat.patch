diff -up llvm-9.0.0-20190725/clang/lib/Frontend/InitPreprocessor.cpp.7~ llvm-9.0.0-20190725/clang/lib/Frontend/InitPreprocessor.cpp
--- llvm-9.0.0-20190725/clang/lib/Frontend/InitPreprocessor.cpp.7~	2019-07-25 17:06:35.000000000 +0200
+++ llvm-9.0.0-20190725/clang/lib/Frontend/InitPreprocessor.cpp	2019-07-25 22:18:42.694260827 +0200
@@ -571,12 +571,13 @@ static void InitializePredefinedMacros(c
                       "\"" CLANG_VERSION_STRING " "
                       + getClangFullRepositoryVersion() + "\"");
   if (!LangOpts.MSVCCompat) {
-    // Currently claim to be compatible with GCC 4.2.1-5621, but only if we're
+    // Currently claim to be compatible with GCC 9.2.1, but only if we're
     // not compiling for MSVC compatibility
     Builder.defineMacro("__GNUC_MINOR__", "2");
     Builder.defineMacro("__GNUC_PATCHLEVEL__", "1");
-    Builder.defineMacro("__GNUC__", "4");
-    Builder.defineMacro("__GXX_ABI_VERSION", "1002");
+    Builder.defineMacro("__GNUC__", "9");
+    if (LangOpts.CPlusPlus)
+      Builder.defineMacro("__GXX_ABI_VERSION", "1013");
   }
 
   // Define macros for the C11 / C++11 memory orderings
@@ -710,7 +711,7 @@ static void InitializePredefinedMacros(c
     Builder.defineMacro("__DEPRECATED");
 
   if (!LangOpts.MSVCCompat && LangOpts.CPlusPlus) {
-    Builder.defineMacro("__GNUG__", "4");
+    Builder.defineMacro("__GNUG__", "9");
     Builder.defineMacro("__GXX_WEAK__");
     Builder.defineMacro("__private_extern__", "extern");
   }
