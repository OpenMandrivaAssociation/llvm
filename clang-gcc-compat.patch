--- clang/lib/Driver/Driver.cpp.omv~	2014-06-19 14:54:08.769696465 +0200
+++ clang/lib/Driver/Driver.cpp	2014-06-19 14:56:16.840696877 +0200
@@ -671,7 +671,7 @@ bool Driver::HandleImmediateArgs(const C
     // If we want to return a more correct answer some day, then we should
     // introduce a non-pedantically GCC compatible mode to Clang in which we
     // provide sensible definitions for -dumpversion, __VERSION__, etc.
-    llvm::outs() << "4.2.1\n";
+    llvm::outs() << "4.9.1\n";
     return false;
   }
 
--- clang/lib/Driver/Tools.cpp.omv~	2014-06-19 14:56:22.545696896 +0200
+++ clang/lib/Driver/Tools.cpp	2014-06-19 14:56:32.988696929 +0200
@@ -6005,7 +6005,7 @@ void openbsd::Link::ConstructJob(Compila
   if (Triple.substr(0, 6) == "x86_64")
     Triple.replace(0, 6, "amd64");
   CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc-lib/" + Triple +
-                                       "/4.2.1"));
+                                       "/4.9.1"));
 
   Args.AddAllArgs(CmdArgs, options::OPT_L);
   Args.AddAllArgs(CmdArgs, options::OPT_T_Group);
--- clang/lib/Frontend/InitPreprocessor.cpp.omv~	2014-06-19 14:57:36.313697133 +0200
+++ clang/lib/Frontend/InitPreprocessor.cpp	2014-06-19 14:59:29.662697499 +0200
@@ -405,9 +405,9 @@ static void InitializePredefinedMacros(c
 #undef TOSTR
 #undef TOSTR2
   if (!LangOpts.MSVCCompat) {
-    // Currently claim to be compatible with GCC 4.2.1-5621, but only if we're
+    // Currently claim to be compatible with GCC 4.9.1, but only if we're
     // not compiling for MSVC compatibility
-    Builder.defineMacro("__GNUC_MINOR__", "2");
+    Builder.defineMacro("__GNUC_MINOR__", "9");
     Builder.defineMacro("__GNUC_PATCHLEVEL__", "1");
     Builder.defineMacro("__GNUC__", "4");
     Builder.defineMacro("__GXX_ABI_VERSION", "1002");
@@ -425,9 +425,9 @@ static void InitializePredefinedMacros(c
   Builder.defineMacro("__PRAGMA_REDEFINE_EXTNAME", "1");
 
   // As sad as it is, enough software depends on the __VERSION__ for version
-  // checks that it is necessary to report 4.2.1 (the base GCC version we claim
+  // checks that it is necessary to report 4.9.1 (the base GCC version we claim
   // compatibility with) first.
-  Builder.defineMacro("__VERSION__", "\"4.2.1 Compatible " + 
+  Builder.defineMacro("__VERSION__", "\"4.9.1 Compatible " + 
                       Twine(getClangFullCPPVersion()) + "\"");
 
   // Initialize language-specific preprocessor defines.
--- clang/test/Driver/immediate-options.c.omv~	2014-06-19 15:00:33.609697705 +0200
+++ clang/test/Driver/immediate-options.c	2014-06-19 15:00:37.950697719 +0200
@@ -7,7 +7,7 @@
 // HELP-HIDDEN: driver-mode
 
 // RUN: %clang -dumpversion | FileCheck %s -check-prefix=DUMPVERSION
-// DUMPVERSION: 4.2.1
+// DUMPVERSION: 4.9.1
 
 // RUN: %clang -print-search-dirs | FileCheck %s -check-prefix=PRINT-SEARCH-DIRS
 // PRINT-SEARCH-DIRS: programs: ={{.*}}
--- clang/test/Preprocessor/init.c.omv~	2014-06-19 15:00:17.233697652 +0200
+++ clang/test/Preprocessor/init.c	2014-06-19 15:00:24.201697674 +0200
@@ -3436,7 +3436,7 @@
 // SPARC:#define __SIZE_WIDTH__ 32
 // SPARC:#define __UINTMAX_TYPE__ long long unsigned int
 // SPARC:#define __USER_LABEL_PREFIX__ _
-// SPARC:#define __VERSION__ "4.2.1 Compatible
+// SPARC:#define __VERSION__ "4.9.1 Compatible
 // SPARC:#define __WCHAR_MAX__ 2147483647
 // SPARC:#define __WCHAR_TYPE__ int
 // SPARC:#define __WCHAR_WIDTH__ 32
