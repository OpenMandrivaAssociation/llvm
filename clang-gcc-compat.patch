diff -up llvm-7.0.0.src/tools/clang/lib/Driver/Driver.cpp.gcc71~ llvm-7.0.0.src/tools/clang/lib/Driver/Driver.cpp
--- llvm-7.0.0.src/tools/clang/lib/Driver/Driver.cpp.gcc71~	2018-04-18 20:25:03.000000000 +0200
+++ llvm-7.0.0.src/tools/clang/lib/Driver/Driver.cpp	2018-04-25 19:04:57.149678788 +0200
@@ -1508,7 +1508,7 @@ bool Driver::HandleImmediateArgs(const C
     // If we want to return a more correct answer some day, then we should
     // introduce a non-pedantically GCC compatible mode to Clang in which we
     // provide sensible definitions for -dumpversion, __VERSION__, etc.
-    llvm::outs() << "4.2.1\n";
+    llvm::outs() << "8.0.1\n";
     return false;
   }
 
diff -up llvm-7.0.0.src/tools/clang/lib/Frontend/InitPreprocessor.cpp.gcc71~ llvm-7.0.0.src/tools/clang/lib/Frontend/InitPreprocessor.cpp
--- llvm-7.0.0.src/tools/clang/lib/Frontend/InitPreprocessor.cpp.gcc71~	2018-04-25 15:33:19.000000000 +0200
+++ llvm-7.0.0.src/tools/clang/lib/Frontend/InitPreprocessor.cpp	2018-04-25 19:04:57.149678788 +0200
@@ -579,12 +579,13 @@ static void InitializePredefinedMacros(c
                       "\"" CLANG_VERSION_STRING " "
                       + getClangFullRepositoryVersion() + "\"");
   if (!LangOpts.MSVCCompat) {
-    // Currently claim to be compatible with GCC 4.2.1-5621, but only if we're
+    // Currently claim to be compatible with GCC 8.0.1, but only if we're
     // not compiling for MSVC compatibility
     Builder.defineMacro("__GNUC_MINOR__", "2");
     Builder.defineMacro("__GNUC_PATCHLEVEL__", "1");
-    Builder.defineMacro("__GNUC__", "4");
-    Builder.defineMacro("__GXX_ABI_VERSION", "1002");
+    Builder.defineMacro("__GNUC__", "8");
+    if (LangOpts.CPlusPlus)
+      Builder.defineMacro("__GXX_ABI_VERSION", "1012");
   }
 
   // Define macros for the C11 / C++11 memory orderings
@@ -613,9 +614,9 @@ static void InitializePredefinedMacros(c
   Builder.defineMacro("__PRAGMA_REDEFINE_EXTNAME", "1");
 
   // As sad as it is, enough software depends on the __VERSION__ for version
-  // checks that it is necessary to report 4.2.1 (the base GCC version we claim
+  // checks that it is necessary to report 8.0.1 (the base GCC version we claim
   // compatibility with) first.
-  Builder.defineMacro("__VERSION__", "\"4.2.1 Compatible " +
+  Builder.defineMacro("__VERSION__", "\"8.0.1 Compatible " +
                       Twine(getClangFullCPPVersion()) + "\"");
 
   // Initialize language-specific preprocessor defines.
@@ -706,7 +707,7 @@ static void InitializePredefinedMacros(c
     Builder.defineMacro("__DEPRECATED");
 
   if (!LangOpts.MSVCCompat && LangOpts.CPlusPlus) {
-    Builder.defineMacro("__GNUG__", "4");
+    Builder.defineMacro("__GNUG__", "8");
     Builder.defineMacro("__GXX_WEAK__");
     Builder.defineMacro("__private_extern__", "extern");
   }
diff -up llvm-7.0.0.src/tools/clang/test/Driver/immediate-options.c.gcc71~ llvm-7.0.0.src/tools/clang/test/Driver/immediate-options.c
--- llvm-7.0.0.src/tools/clang/test/Driver/immediate-options.c.gcc71~	2017-04-04 23:46:50.000000000 +0200
+++ llvm-7.0.0.src/tools/clang/test/Driver/immediate-options.c	2018-04-25 19:04:57.149678788 +0200
@@ -7,7 +7,7 @@
 // HELP-HIDDEN: driver-mode
 
 // RUN: %clang -dumpversion | FileCheck %s -check-prefix=DUMPVERSION
-// DUMPVERSION: 4.2.1
+// DUMPVERSION: 8.0.1
 
 // RUN: %clang -print-search-dirs | FileCheck %s -check-prefix=PRINT-SEARCH-DIRS
 // PRINT-SEARCH-DIRS: programs: ={{.*}}
diff -up llvm-7.0.0.src/tools/clang/test/Preprocessor/init.c.gcc71~ llvm-7.0.0.src/tools/clang/test/Preprocessor/init.c
--- llvm-7.0.0.src/tools/clang/test/Preprocessor/init.c.gcc71~	2018-04-13 00:50:50.000000000 +0200
+++ llvm-7.0.0.src/tools/clang/test/Preprocessor/init.c	2018-04-25 19:04:57.150678765 +0200
@@ -7569,7 +7569,7 @@
 // SPARC:#define __UINT_LEAST8_MAX__ 255
 // SPARC:#define __UINT_LEAST8_TYPE__ unsigned char
 // SPARC:#define __USER_LABEL_PREFIX__
-// SPARC:#define __VERSION__ "4.2.1 Compatible{{.*}}
+// SPARC:#define __VERSION__ "8.0.1 Compatible{{.*}}
 // SPARC:#define __WCHAR_MAX__ 2147483647
 // SPARC:#define __WCHAR_TYPE__ int
 // SPARC:#define __WCHAR_WIDTH__ 32
