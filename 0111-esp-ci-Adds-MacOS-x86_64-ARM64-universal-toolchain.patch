From 22f750ee003fdc25db1124064e54f586228181b9 Mon Sep 17 00:00:00 2001
From: Andrei Safronov <safronov@espressif.com>
Date: Wed, 5 Apr 2023 00:59:33 +0300
Subject: [PATCH 111/158] esp/ci: Adds MacOS x86_64/ARM64 universal toolchain

 builds
---
 .gitlab-ci.yml | 70 +++++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 58 insertions(+), 12 deletions(-)

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index 6da427203109..5ce8137132c9 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -4,7 +4,7 @@ stages:
   - test
   - public_deploy
 
-image: ${CI_DOCKER_REGISTRY}/llvm-build:3
+image: ${CI_DOCKER_REGISTRY}/llvm-build:4
 
 variables:
 
@@ -18,7 +18,7 @@ variables:
   XTENSA_OVERLAYS_REPO: "xtensa-overlays"
   XTENSA_OVERLAYS_REF: "master"
   # TODO: update vars below to tags names after related branches are merged in those repos
-  XTENSA_CLANG_TOOLCHAIN_REF: "release_universal_clang_14.0.0_gcc_8.4.0"
+  XTENSA_CLANG_TOOLCHAIN_REF: "build_macos_arm64"
   LLVM_GCC_TESTSUITE_REF: "feature/toolchain_build_script"
 
   PLATFORM_NAME_LINUX_ARM64: "linux-arm64"
@@ -110,8 +110,10 @@ before_script:
   artifacts:
     paths:
       - ${DIST_DIR}/
+      - newlib/
       - ${BUILD_DIR}/clang_tests.log
       - ${BUILD_DIR}/clang_build.log
+      - ${BUILD_DIR}/newlib_build.log
     when: always
     expire_in: 1 day
   variables:
@@ -125,8 +127,6 @@ before_script:
     - pushd ${DOWNLOADS_DIR}
     - export ESP_GCC_TOOLCHAIN_DIST_BASE=$PWD
     - *get_gcc_toolchain
-    - git clone -b ${NEWLIB_REF} --single-branch ${GITLAB_SSH_SERVER}/idf/${NEWLIB_REPO}.git
-    - export NEWLIB_PATH=$PWD/${NEWLIB_REPO}
     - git clone -b ${BINUTILS_REF} --single-branch ${GITLAB_SSH_SERVER}/idf/${BINUTILS_REPO}.git
     - export BINUTILS_PATH=$PWD/${BINUTILS_REPO}
     - git clone -b ${XTENSA_OVERLAYS_REF} --single-branch ${GITLAB_SSH_SERVER}/idf/${XTENSA_OVERLAYS_REPO}.git
@@ -139,15 +139,38 @@ before_script:
     - export BUILD_PATH=$PWD/${BUILD_DIR}
     - mkdir -p ${BUILD_PATH}
     - export USE_PARALLEL_LINK_JOBS=2
-    - ${BUILD_TOOLCHAIN_CMD} --llvm-path=${LLVM_PROJECT_PATH} --newlib-path=${NEWLIB_PATH}
+    # build Clang toolchain w/o newlib
+    - ${BUILD_TOOLCHAIN_CMD} --llvm-path=${LLVM_PROJECT_PATH}
       --gcc-toolchains-path=${ESP_GCC_TOOLCHAIN_DIST_BASE} --binutils-path=${BINUTILS_PATH}
-      --xtensa-overlays-path=${XTENSA_OVERLAYS_PATH} ${BUILD_TOOLCHAIN_CMD_ARGS} ${BUILD_PATH} 2>&1 > ${BUILD_PATH}/clang_build.log
+      --xtensa-overlays-path=${XTENSA_OVERLAYS_PATH} --host=${CONF_HOST} ${BUILD_TOOLCHAIN_CMD_ARGS} ${BUILD_PATH} 2>&1 > ${BUILD_PATH}/clang_build.log
+    # use just built Clang to build newlib
+    - export PATH=${BUILD_PATH}/esp-clang/bin:$PATH
+    - export BUILD_HOST=$(gcc -dumpmachine)
+    - export NEWLIB_OVERLAY_DISTRO_PATH=$PWD/newlib;
+    # build newlib overlay using ESP native (Linux) clang toolchain only
+    # it will be re-used for cross-buit toolchains (win and mac).
+    # FIXME: it would be good to move newlib overlay build to separate job and have job sequence like
+    # clang_linux_wo_newlib -> newlib_overlay -> clang_linux_full(copy newlib) -> clang_linux_unittests
+    # but we need full native (Linux) toolchain to run unittests and unittests need clang build dir.
+    # clang build dir may occupy about 2GB, so it looks too heavy to pass it as artifact
+    - if [ "${CONF_HOST}" == "${BUILD_HOST}" ]; then
+        export BUILD_NEWLIB_PATH=${BUILD_PATH}/newlib;
+        mkdir -p ${NEWLIB_OVERLAY_DISTRO_PATH};
+        git clone -b ${NEWLIB_REF} --single-branch ${GITLAB_SSH_SERVER}/idf/${NEWLIB_REPO}.git;
+        export NEWLIB_PATH=$PWD/${NEWLIB_REPO};
+        ./build-toolchain.sh --newlib-path=${NEWLIB_PATH} --xtensa-overlays-path=${XTENSA_OVERLAYS_PATH} ${BUILD_NEWLIB_PATH} 2>&1 > ${BUILD_PATH}/newlib_build.log;
+        pushd ${BUILD_NEWLIB_PATH};
+        ${ARCHIVE_TOOL_LINUX} ${NEWLIB_OVERLAY_DISTRO_PATH}/esp-clang-newlib-overlay.${ARCHIVE_EXT_LINUX} esp-clang/;
+        popd;
+      fi
+    - ${UNARCHIVE_TOOL_LINUX} ${NEWLIB_OVERLAY_DISTRO_PATH}/esp-clang-newlib-overlay.${ARCHIVE_EXT_LINUX} -C ${BUILD_PATH}
+    # strip binutils afer newlib is built
+    - STRIP_BINUTILS=YES ./build-toolchain.sh --host=${CONF_HOST} ${BUILD_PATH}
     # Run unit tests for native build only.
     # Run as non-root user because permission tests fail when run by root.
-    - export BUILD_HOST=$(gcc -dumpmachine)
-    - export LLVM_BUILD_PATH=${LLVM_PROJECT_PATH}/llvm/build-Release-${CONF_HOST}
     - if [ "${CONF_HOST}" == "${BUILD_HOST}" ]; then
-        echo "Run unit tests for native build";
+        export LLVM_BUILD_PATH=${LLVM_PROJECT_PATH}/llvm/build-Release-${CONF_HOST};
+        echo "Run unit tests for native build ib ${LLVM_BUILD_PATH}";
         useradd -m test_runner;
         chown -R test_runner ${LLVM_BUILD_PATH};
         touch ${BUILD_PATH}/clang_tests.log;
@@ -169,7 +192,7 @@ build_x86_64-linux-gnu:
     ARCHIVE_EXT: "${ARCHIVE_EXT_LINUX}"
     BUILD_TOOLCHAIN_CMD: "./build-toolchain.sh"
 
-build_x86_64-w64-mingw32:
+.build_x86_64-w64-mingw32:
   extends: .build_template
   needs:
     - job: build_x86_64-linux-gnu
@@ -192,7 +215,7 @@ build_x86_64-w64-mingw32:
     - rm -rf ${DIST_DIR}
     - rm -rf ${BUILD_DIR}
     # add build command args speciifc for Windows build
-    - export BUILD_TOOLCHAIN_CMD_ARGS="--host=${CONF_HOST} --native-esp-clang-path=$PWD/esp-clang-${PLATFORM_NAME_LINUX}"
+    - export BUILD_TOOLCHAIN_CMD_ARGS="--native-esp-clang-path=$PWD/esp-clang-${PLATFORM_NAME_LINUX}"
   variables:
     CONF_HOST: "x86_64-w64-mingw32"
     PLATFORM_NAME: "${PLATFORM_NAME_WIN}"
@@ -201,7 +224,30 @@ build_x86_64-w64-mingw32:
     ARCHIVE_EXT: "${ARCHIVE_EXT_WIN}"
     BUILD_TOOLCHAIN_CMD: "./build-toolchain-win.sh"
 
-test_x86_64-linux-gnu:
+.build_apple-darwin_template:
+  extends: .build_template
+  needs:
+    - job: build_x86_64-linux-gnu
+  variables:
+    PLATFORM_NAME: "${PLATFORM_NAME_MACOS}"
+    ARCHIVE_TOOL: "${ARCHIVE_TOOL_MACOS}"
+    UNARCHIVE_TOOL: "${UNARCHIVE_TOOL_MACOS}"
+    ARCHIVE_EXT: "${ARCHIVE_EXT_MACOS}"
+    GCC_ARCHIVE_EXT: "${GCC_ARCHIVE_EXT_MACOS}"
+
+build_x86_64-apple-darwin:
+  extends: .build_apple-darwin_template
+  variables:
+    CONF_HOST: "x86_64-apple-darwin21.1"
+    BUILD_TOOLCHAIN_CMD: "./build-toolchain-macos.sh --host-arch=x86_64"
+
+build_aarch64-apple-darwin:
+  extends: .build_apple-darwin_template
+  variables:
+    CONF_HOST: "aarch64-apple-darwin21.1"
+    BUILD_TOOLCHAIN_CMD: "./build-toolchain-macos.sh --host-arch=aarch64"
+
+.test_x86_64-linux-gnu:
   stage: test
   tags: [ "amd64", "build" ]
   allow_failure: true
-- 
2.40.1

