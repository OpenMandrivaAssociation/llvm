From a456b7ddf8e10727c9082bede365cb6b814f8526 Mon Sep 17 00:00:00 2001
From: Andrei Safronov <safronov@espressif.com>
Date: Thu, 28 Jul 2022 10:47:57 +0300
Subject: [PATCH 147/158] [Xtensa] Implement __ieee754_sqrtf builtin

---
 compiler-rt/lib/builtins/CMakeLists.txt       |  6 +-
 .../lib/builtins/xtensa/ieee754_sqrtf.S       | 53 ++++++++++++
 .../builtins/Unit/xtensa/ieee754_sqrtf_test.c | 81 +++++++++++++++++++
 3 files changed, 139 insertions(+), 1 deletion(-)
 create mode 100644 compiler-rt/lib/builtins/xtensa/ieee754_sqrtf.S
 create mode 100644 compiler-rt/test/builtins/Unit/xtensa/ieee754_sqrtf_test.c

diff --git a/compiler-rt/lib/builtins/CMakeLists.txt b/compiler-rt/lib/builtins/CMakeLists.txt
index 28eecc30fc22..052a23f166d4 100644
--- a/compiler-rt/lib/builtins/CMakeLists.txt
+++ b/compiler-rt/lib/builtins/CMakeLists.txt
@@ -715,7 +715,11 @@ set(riscv64_SOURCES
 set(sparc_SOURCES ${GENERIC_SOURCES} ${GENERIC_TF_SOURCES})
 set(sparcv9_SOURCES ${GENERIC_SOURCES} ${GENERIC_TF_SOURCES})
 
-set(xtensa_SOURCES ${GENERIC_SOURCES} ${GENERIC_TF_SOURCES})
+set(xtensa_SOURCES
+  xtensa/ieee754_sqrtf.S
+  ${GENERIC_SOURCES}
+  ${GENERIC_TF_SOURCES}
+)
 
 set(wasm32_SOURCES
   ${GENERIC_TF_SOURCES}
diff --git a/compiler-rt/lib/builtins/xtensa/ieee754_sqrtf.S b/compiler-rt/lib/builtins/xtensa/ieee754_sqrtf.S
new file mode 100644
index 000000000000..3e5f2a615e67
--- /dev/null
+++ b/compiler-rt/lib/builtins/xtensa/ieee754_sqrtf.S
@@ -0,0 +1,53 @@
+//===-- ieee754_sqrtf.S - single precision square root --------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+  .text
+
+#ifndef __XTENSA_SOFT_FLOAT__
+  .align  4
+  .global __ieee754_sqrtf
+  .type   __ieee754_sqrtf, @function
+__ieee754_sqrtf:
+#ifdef __XTENSA_WINDOWED_ABI__
+  entry      sp, 16
+#endif
+  wfr        f0, a2
+  sqrt0.s    f1, f0
+  const.s    f2, 0
+  maddn.s    f2, f1, f1
+  nexp01.s   f3, f0
+  const.s    f7, 3
+  addexp.s   f3, f7
+  maddn.s    f7, f2, f3
+  nexp01.s   f2, f0
+  neg.s      f4, f2
+  maddn.s    f1, f7, f1
+  const.s    f7, 0
+  const.s    f5, 0
+  const.s    f6, 0
+  maddn.s    f7, f4, f1
+  maddn.s    f5, f1, f3
+  const.s    f3, 3
+  maddn.s    f6, f3, f1
+  maddn.s    f2, f7, f7
+  maddn.s    f3, f5, f1
+  neg.s      f1, f6
+  maddn.s    f7, f2, f1
+  maddn.s    f6, f3, f6
+  mksadj.s   f1, f0
+  nexp01.s   f0, f0
+  maddn.s    f0, f7, f7
+  neg.s      f2, f6
+  addexpm.s  f7, f1
+  addexp.s   f2, f1
+  divn.s     f7, f0, f2
+  rfr        a2, f7
+#ifdef __XTENSA_WINDOWED_ABI__
+  retw
+#endif
+#endif
\ No newline at end of file
diff --git a/compiler-rt/test/builtins/Unit/xtensa/ieee754_sqrtf_test.c b/compiler-rt/test/builtins/Unit/xtensa/ieee754_sqrtf_test.c
new file mode 100644
index 000000000000..29a2c168db5a
--- /dev/null
+++ b/compiler-rt/test/builtins/Unit/xtensa/ieee754_sqrtf_test.c
@@ -0,0 +1,81 @@
+// REQUIRES: xtensa-target-arch
+// RUN: %clang_builtins %s %librt -o %t && %run %t
+#define SINGLE_PRECISION
+#include "fp_lib.h"
+#include "int_lib.h"
+#include <math.h>
+#include <stdio.h>
+
+#if __xtensa__
+extern float __ieee754_sqrtf(float a);
+
+uint32_t test_data[32] = {
+  0x1f411656,
+  0x1f088887,
+  0x7fc00000,
+  0x7fc00000,
+  0x4fb5d274,
+  0x7fc00000,
+  0x4bb53869,
+  0x7fc00000,
+  0x4ab511d2,
+  0x35350b63,
+  0x2a800246,
+  0x7fc00000,
+  0x426f77ec,
+  0x7fc00000,
+  0x7fc00000,
+  0x541460cd,
+  0x39ea0f5a,
+  0x2cd13a2c,
+  0x7fc00000,
+  0x43054444,
+  0x3160c8cb,
+  0x7fc00000,
+  0x4423b1e1,
+  0x31f40eb0,
+  0x28d6dcdd,
+  0x2446a9bc,
+  0x22066202,
+  0x20e172a9,
+  0x204c71ae,
+  0x20088887,
+  0x1fc11656,
+  0x1f888887
+};
+
+int test__ieee754_sqrtf(){
+    if (__ieee754_sqrtf(-0.00000000) != -0.00000000)
+      return 1;
+    if (__ieee754_sqrtf(0.00000000) != 0.00000000)
+      return 1;
+    if (!isnan(__ieee754_sqrtf(NAN)))
+      return 1;
+    if (__ieee754_sqrtf(INFINITY) != INFINITY)
+      return 1;
+    if (__ieee754_sqrtf(4.0) != 2.0)
+      return 1;
+
+    //Check some simple tests usign precalculated data
+    uint32_t x = 0x123456;
+    for (int i = 0; i < 32; i++) {
+      if (toRep(__ieee754_sqrtf(fromRep(x))) != test_data[i])
+        return 1;
+      x = (x >> 1) | ((x & 1) << 31) ;
+    }
+    return 0;
+}
+#endif
+
+
+int main()
+{
+#if __xtensa__
+    if (test__ieee754_sqrtf())
+        return 1;
+#else
+    printf("skipped\n");
+#endif
+
+    return 0;
+}
-- 
2.40.1

