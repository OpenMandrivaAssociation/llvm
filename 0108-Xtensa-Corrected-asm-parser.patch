From 9728f2787d1e4e6010a7dd2a361df9e0179b3c02 Mon Sep 17 00:00:00 2001
From: Andrei Safronov <safronov@espressif.com>
Date: Wed, 5 Apr 2023 00:59:32 +0300
Subject: [PATCH 108/140] [Xtensa] Corrected asm parser.

Expand addi operation immediate, to addmi + addi. Improved constants evalutaion.
---
 .../Xtensa/AsmParser/XtensaAsmParser.cpp      | 75 +++++++++++++++----
 .../Xtensa/MCTargetDesc/XtensaMCAsmInfo.cpp   |  4 +-
 llvm/test/MC/Xtensa/Core/arith.s              | 10 +++
 llvm/test/MC/Xtensa/Core/invalid.s            | 10 +--
 llvm/test/MC/Xtensa/Core/processor-control.s  |  4 +
 5 files changed, 84 insertions(+), 19 deletions(-)

diff --git a/llvm/lib/Target/Xtensa/AsmParser/XtensaAsmParser.cpp b/llvm/lib/Target/Xtensa/AsmParser/XtensaAsmParser.cpp
index dcabef7cd13a..c8a9a51558da 100644
--- a/llvm/lib/Target/Xtensa/AsmParser/XtensaAsmParser.cpp
+++ b/llvm/lib/Target/Xtensa/AsmParser/XtensaAsmParser.cpp
@@ -113,6 +113,10 @@ public:
   XtensaAsmParser(const MCSubtargetInfo &STI, MCAsmParser &Parser,
                   const MCInstrInfo &MII, const MCTargetOptions &Options)
       : MCTargetAsmParser(Options, STI, MII) {
+    Parser.addAliasForDirective(".half", ".2byte");
+    Parser.addAliasForDirective(".hword", ".2byte");
+    Parser.addAliasForDirective(".word", ".4byte");
+    Parser.addAliasForDirective(".dword", ".8byte");
     setAvailableFeatures(ComputeAvailableFeatures(STI.getFeatureBits()));
   }
 
@@ -258,7 +262,10 @@ public:
     return Kind == Immediate && inRange(getImm(), MinValue, MaxValue);
   }
 
-  bool isImm8() const { return isImm(-128, 127); }
+  bool isImm8() const {
+    //The addi instruction maybe expaned to addmi and addi.
+    return isImm((-32768 - 128), (32512 + 127));
+  }
 
   bool isImm8_sh8() const {
     return isImm(-32768, 32512) &&
@@ -269,10 +276,10 @@ public:
 
   // Convert MOVI to literal load, when immediate is not in range (-2048, 2047)
   bool isImm12m() const {
-    //Process special case when operand is symbol
-    if ((Kind == Immediate) && (getImm()->getKind() == MCExpr::SymbolRef))
-      return true;
-    return  isImm(LONG_MIN, LONG_MAX);
+    if (Kind == Immediate)
+       return true;
+
+    return false;
   }
 
   bool isOffset4m32() const {
@@ -495,6 +502,40 @@ bool XtensaAsmParser::processInstruction(MCInst &Inst, SMLoc IDLoc,
   const unsigned Opcode = Inst.getOpcode();
 
   switch (Opcode) {
+  case Xtensa::ADDI: {
+    int64_t Imm = Inst.getOperand(2).getImm();
+    // Expand 16-bit immediate in ADDI instruction:
+    // ADDI rd, rs, imm - > ADMI rd, rs, (imm & 0xff00); ADDI rd, rd, (imm & 0xff)
+    if ((Imm < -128) || (Imm > 127)) {
+      unsigned DReg = Inst.getOperand(0).getReg();
+      unsigned SReg = Inst.getOperand(1).getReg();
+      MCInst ADDMIInst;
+      MCInst ADDIInst;
+      int64_t ImmHi = Imm & (~((uint64_t)0xff));
+      int64_t ImmLo = Imm & 0xff;
+
+      if (ImmLo > 127) {
+        ImmHi += 0x100;
+        ImmLo = ImmLo - 0x100;
+      }
+
+      ADDMIInst.setOpcode(Xtensa::ADDMI);
+      ADDMIInst.addOperand(MCOperand::createReg(DReg));
+      ADDMIInst.addOperand(MCOperand::createReg(SReg));
+      ADDMIInst.addOperand(MCOperand::createImm(ImmHi));
+      ADDMIInst.setLoc(IDLoc);
+
+      Out.emitInstruction(ADDMIInst, *STI);
+
+      ADDIInst.setOpcode(Xtensa::ADDI);
+      ADDIInst.addOperand(MCOperand::createReg(DReg));
+      ADDIInst.addOperand(MCOperand::createReg(DReg));
+      ADDIInst.addOperand(MCOperand::createImm(ImmLo));
+      ADDIInst.setLoc(IDLoc);
+
+      Inst = ADDIInst;
+    }
+  } break;
   case Xtensa::L32R: {
     const MCSymbolRefExpr *OpExpr =
         (const MCSymbolRefExpr *)Inst.getOperand(1).getExpr();
@@ -591,7 +632,7 @@ bool XtensaAsmParser::MatchAndEmitInstruction(SMLoc IDLoc, unsigned &Opcode,
   }
   case Match_InvalidImm8:
     return Error(RefineErrorLoc(IDLoc, Operands, ErrorInfo),
-                 "expected immediate in range [-128, 127]");
+                 "expected immediate in range [-32896, 32639]");
   case Match_InvalidImm8_sh8:
     return Error(RefineErrorLoc(IDLoc, Operands, ErrorInfo),
                  "expected immediate in range [-32768, 32512], first 8 bits "
@@ -706,6 +747,7 @@ OperandMatchResultTy XtensaAsmParser::parseRegister(OperandVector &Operands,
   AsmToken Buf[2];
   std::string RegName = "";
   int64_t Num;
+  bool IsIdentifier = false;
 
   // If this a parenthesised register name is allowed, parse it atomically
   if (AllowParens && getLexer().is(AsmToken::LParen)) {
@@ -724,10 +766,17 @@ OperandMatchResultTy XtensaAsmParser::parseRegister(OperandVector &Operands,
   default:
     return MatchOperand_NoMatch;
   case AsmToken::Integer:
+  case AsmToken::LParen:
     if ((!SR) && (!UR))
       return MatchOperand_NoMatch;
+    const MCExpr *Res;
+
+    if (getParser().parseExpression(Res))
+      return MatchOperand_ParseFail;
+
+    if (!Res->evaluateAsAbsolute(Num))
+      return MatchOperand_NoMatch;
 
-    Num = getLexer().getTok().getIntVal();
     // Parse case when we expect UR operand as special case,
     // because SR and UR registers may have the same number
     // and such situation may lead to confilct
@@ -755,6 +804,7 @@ OperandMatchResultTy XtensaAsmParser::parseRegister(OperandVector &Operands,
       RegNo = MatchRegisterAltName(RegName);
     break;
   case AsmToken::Identifier:
+    IsIdentifier = true;
     RegName = getLexer().getTok().getIdentifier().str();
     RegNo = MatchRegisterName(RegName);
     if (RegNo == 0)
@@ -776,7 +826,10 @@ OperandMatchResultTy XtensaAsmParser::parseRegister(OperandVector &Operands,
     Operands.push_back(XtensaOperand::createToken("(", FirstS));
   SMLoc S = getLoc();
   SMLoc E = getParser().getTok().getEndLoc();
-  getLexer().Lex();
+
+  if (IsIdentifier)
+    getLexer().Lex();
+
   Operands.push_back(XtensaOperand::createReg(RegNo, S, E));
 
   if (HadParens) {
@@ -805,12 +858,8 @@ OperandMatchResultTy XtensaAsmParser::parseImmediate(OperandVector &Operands) {
       return MatchOperand_ParseFail;
     break;
   case AsmToken::Identifier: {
-    StringRef Identifier;
-    if (getParser().parseIdentifier(Identifier))
+    if (getParser().parseExpression(Res))
       return MatchOperand_ParseFail;
-
-    MCSymbol *Sym = getContext().getOrCreateSymbol(Identifier);
-    Res = MCSymbolRefExpr::create(Sym, MCSymbolRefExpr::VK_None, getContext());
     break;
   }
   case AsmToken::Percent:
diff --git a/llvm/lib/Target/Xtensa/MCTargetDesc/XtensaMCAsmInfo.cpp b/llvm/lib/Target/Xtensa/MCTargetDesc/XtensaMCAsmInfo.cpp
index ce80722230bb..53e92aba4e2b 100644
--- a/llvm/lib/Target/Xtensa/MCTargetDesc/XtensaMCAsmInfo.cpp
+++ b/llvm/lib/Target/Xtensa/MCTargetDesc/XtensaMCAsmInfo.cpp
@@ -23,10 +23,12 @@ XtensaMCAsmInfo::XtensaMCAsmInfo(const Triple &TT) {
   PrivateGlobalPrefix = ".L";
   CommentString = "#";
   ZeroDirective = "\t.space\t";
+  Data16bitsDirective = "\t.half\t";
+  Data32bitsDirective = "\t.word\t";
   Data64bitsDirective = "\t.quad\t";
   GlobalDirective = "\t.global\t";
   UsesELFSectionDirectiveForBSS = true;
   SupportsDebugInformation = true;
   ExceptionsType = ExceptionHandling::DwarfCFI;
-  AlignmentIsInBytes = false;
+  AlignmentIsInBytes = true;
 }
diff --git a/llvm/test/MC/Xtensa/Core/arith.s b/llvm/test/MC/Xtensa/Core/arith.s
index 2f3146b9533c..fb6ac2608b0a 100644
--- a/llvm/test/MC/Xtensa/Core/arith.s
+++ b/llvm/test/MC/Xtensa/Core/arith.s
@@ -27,6 +27,16 @@ addi a8, sp, -128
 # CHECK-INST: addi a8, a1, -12
 # CHECK: encoding: [0x82,0xc1,0xf4]
 addi a8, a1, -12
+# CHECK-INST:  addmi a8, a1,  256
+# CHECK: encoding: [0x82,0xd1,0x01]
+# CHECK-INST:  addi a8, a8,  0
+# CHECK: encoding: [0x82,0xc8,0x00]
+addi a8, a1,  256
+# CHECK-INST:  addmi a8, a1, -9984
+# CHECK: encoding: [0x82,0xd1,0xd9]
+# CHECK-INST:  addi a8, a8,  -16
+# CHECK: encoding: [0x82,0xc8,0xf0]
+addi a8, a1, -10000
 
 # Instruction format RRI8
 # CHECK-INST:  addmi a1, a2, 32512
diff --git a/llvm/test/MC/Xtensa/Core/invalid.s b/llvm/test/MC/Xtensa/Core/invalid.s
index c7473e90c10b..7fc7b47db133 100644
--- a/llvm/test/MC/Xtensa/Core/invalid.s
+++ b/llvm/test/MC/Xtensa/Core/invalid.s
@@ -5,12 +5,12 @@ LBL0:
 # Out of range immediates
 
 # imm8
-addi a1, a2, 300
-# CHECK: :[[#@LINE-1]]:14: error: expected immediate in range [-128, 127]
+addi a1, a2, -33000
+# CHECK: :[[#@LINE-1]]:14: error: expected immediate in range [-32896, 32639]
 
 # imm8
-addi a1, a2, -129
-# CHECK: :[[#@LINE-1]]:14: error: expected immediate in range [-128, 127]
+addi a1, a2, 34000
+# CHECK: :[[#@LINE-1]]:14: error: expected immediate in range [-32896, 32639]
 
 # imm8_sh8
 addmi a1, a2, 33
@@ -66,7 +66,7 @@ aaa a10, a12
 and sp, a2, 10
 # CHECK: :[[#@LINE-1]]:13: error: invalid operand for instruction
 addi sp, a1, a2
-# CHECK: :[[#@LINE-1]]:14: error: expected immediate in range [-128, 127]
+# CHECK: :[[#@LINE-1]]:14: error: expected immediate in range [-32896, 32639]
 
 # Check invalid register names for different formats
 # Instruction format RRR
diff --git a/llvm/test/MC/Xtensa/Core/processor-control.s b/llvm/test/MC/Xtensa/Core/processor-control.s
index ebbc577db772..6295786dfb61 100644
--- a/llvm/test/MC/Xtensa/Core/processor-control.s
+++ b/llvm/test/MC/Xtensa/Core/processor-control.s
@@ -68,6 +68,10 @@ wsr.sar a8
 # CHECK: encoding: [0x80,0x03,0x13]
 wsr a8, 3
 
+# CHECK-INST: wsr     a8, sar
+# CHECK: encoding: [0x80,0x03,0x13]
+wsr a8, (2 + 1)
+
 # Instruction format RRR
 # CHECK-INST: xsr a8, sar
 # CHECK: encoding: [0x80,0x03,0x61]
-- 
2.40.1

