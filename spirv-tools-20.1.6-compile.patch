diff -up llvm-project-llvmorg-20.1.6/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp.omv~ llvm-project-llvmorg-20.1.6/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp
--- llvm-project-llvmorg-20.1.6/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp.omv~	2025-06-01 15:39:07.060156641 +0200
+++ llvm-project-llvmorg-20.1.6/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp	2025-06-01 15:39:14.521600656 +0200
@@ -237,8 +237,8 @@ std::ostream& operator<<(std::ostream& o
       return os << "partially uniform";
     case DivergenceAnalysis::DivergenceLevel::kDivergent:
       return os << "divergent";
-    default:
-      return os << "<invalid divergence level>";
+/*    default:
+      return os << "<invalid divergence level>";*/
   }
 }
 
diff -up llvm-project-llvmorg-20.1.7/llvm/projects/SPIRV-Tools/source/parsed_operand.cpp.omv~ llvm-project-llvmorg-20.1.7/llvm/projects/SPIRV-Tools/source/parsed_operand.cpp
--- llvm-project-llvmorg-20.1.7/llvm/projects/SPIRV-Tools/source/parsed_operand.cpp.omv~	2025-06-14 00:59:01.277782368 +0200
+++ llvm-project-llvmorg-20.1.7/llvm/projects/SPIRV-Tools/source/parsed_operand.cpp	2025-06-14 00:59:09.146410872 +0200
@@ -70,6 +70,7 @@ void EmitNumericLiteral(std::ostream* ou
                 *out << spvtools::utils::FloatProxy<float>(word);
                 break;
             }
+	    break;
           default:
             break;
         }
diff -up llvm-project-llvmorg-20.1.7/llvm/projects/SPIRV-Tools/utils/ggt.py.omv~ llvm-project-llvmorg-20.1.7/llvm/projects/SPIRV-Tools/utils/ggt.py
--- llvm-project-llvmorg-20.1.7/llvm/projects/SPIRV-Tools/utils/ggt.py.omv~	2025-06-14 03:39:04.454939678 +0200
+++ llvm-project-llvmorg-20.1.7/llvm/projects/SPIRV-Tools/utils/ggt.py	2025-06-14 03:39:46.600773748 +0200
@@ -277,7 +277,7 @@ constexpr inline IndexRange IR(uint32_t
         parts.append("IndexRange ExtensionToIndexRange(Extension extension) {\n  switch(extension) {")
         for e in self.extensions:
             parts.append('    case Extension::k{}: return {};'.format(e,self.context.AddString(e)))
-        parts.append("    default: break;");
+        #parts.append("    default: break;");
         parts.append('  }\n  return {};\n}\n');
         self.body_decls.extend(parts)
 
