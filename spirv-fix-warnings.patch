diff -up llvm-project-main/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp.omv~ llvm-project-main/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp
--- llvm-project-main/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp.omv~	2022-01-18 21:11:22.475398317 +0100
+++ llvm-project-main/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp	2022-01-18 21:11:46.637509918 +0100
@@ -21,6 +21,8 @@
 #include "source/opt/instruction.h"
 #include "spirv/unified1/spirv.h"
 
+#pragma GCC diagnostic ignored "-Wcovered-switch-default"
+
 namespace spvtools {
 namespace lint {
 
diff -up llvm-project-main/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp.omv~ llvm-project-main/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp
--- llvm-project-main/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp.omv~	2022-01-18 20:57:20.834586333 +0100
+++ llvm-project-main/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp	2022-01-18 20:57:27.850617063 +0100
@@ -232,6 +232,7 @@ void ConvertToSampledImagePass::FindUses
       case SpvOpImageQuerySamples:
       case SpvOpImageSparseFetch:
         uses->push_back(user);
+	break;
       default:
         break;
     }
diff -up llvm-project-main/llvm/projects/SPIRV-Tools/source/opt/types.cpp.omv~ llvm-project-main/llvm/projects/SPIRV-Tools/source/opt/types.cpp
--- llvm-project-main/llvm/projects/SPIRV-Tools/source/opt/types.cpp.omv~	2022-01-18 20:57:46.110697175 +0100
+++ llvm-project-main/llvm/projects/SPIRV-Tools/source/opt/types.cpp	2022-01-18 21:12:28.143695915 +0100
@@ -24,6 +24,8 @@
 #include "source/util/make_unique.h"
 #include "spirv/unified1/spirv.h"
 
+#pragma GCC diagnostic ignored "-Wcovered-switch-default"
+
 namespace spvtools {
 namespace opt {
 namespace analysis {
diff -up llvm-project-main/llvm/projects/SPIRV-Tools/source/spirv_target_env.cpp.omv~ llvm-project-main/llvm/projects/SPIRV-Tools/source/spirv_target_env.cpp
--- llvm-project-main/llvm/projects/SPIRV-Tools/source/spirv_target_env.cpp.omv~	2022-01-18 20:50:47.824924572 +0100
+++ llvm-project-main/llvm/projects/SPIRV-Tools/source/spirv_target_env.cpp	2022-01-18 20:52:36.467369832 +0100
@@ -355,8 +355,8 @@ std::string spvLogStringForEnv(spv_targe
     }
     case SPV_ENV_VULKAN_1_0:
     case SPV_ENV_VULKAN_1_1:
-    case SPV_ENV_VULKAN_1_1_SPIRV_1_4: {
-      case SPV_ENV_VULKAN_1_2:
+    case SPV_ENV_VULKAN_1_1_SPIRV_1_4:
+    case SPV_ENV_VULKAN_1_2: {
         return "Vulkan";
     }
     case SPV_ENV_UNIVERSAL_1_0:
diff -up llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_image.cpp.omv~ llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_image.cpp
--- llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_image.cpp.omv~	2022-01-18 20:52:54.743445981 +0100
+++ llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_image.cpp	2022-01-18 20:53:18.750546502 +0100
@@ -72,8 +72,9 @@ bool CheckAllImageOperandsHandled() {
     // https://github.com/KhronosGroup/SPIRV-Tools/issues/4565
     case SpvImageOperandsOffsetsMask:
       return true;
+    default:
+      return false;
   }
-  return false;
 }
 
 // Used by GetImageTypeInfo. See OpTypeImage spec for more information.
diff -up llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp.omv~ llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp
--- llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp.omv~	2022-01-18 20:53:32.896605986 +0100
+++ llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp	2022-01-18 20:53:43.406650299 +0100
@@ -192,6 +192,7 @@ bool ContainsInvalidBool(ValidationState
         auto member_type = _.FindDef(member_type_id);
         if (ContainsInvalidBool(_, member_type, skip_builtin)) return true;
       }
+      break;
     default:
       break;
   }
diff -up llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp.omv~ llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp
--- llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp.omv~	2022-01-18 20:53:58.887715748 +0100
+++ llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp	2022-01-18 20:54:04.527739644 +0100
@@ -464,6 +464,7 @@ spv_result_t ValidateExecutionMode(Valid
                     "execution model.";
         }
       }
+      break;
     default:
       break;
   }
diff -up llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp.omv~ llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp
--- llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp.omv~	2022-01-18 20:54:52.188942630 +0100
+++ llvm-project-main/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp	2022-01-18 20:55:05.017997576 +0100
@@ -62,6 +62,7 @@ spv_result_t PrimitivesPass(ValidationSt
                << spvOpcodeString(opcode)
                << ": expected Stream to be constant instruction";
       }
+      break;
     }
 
     default:
