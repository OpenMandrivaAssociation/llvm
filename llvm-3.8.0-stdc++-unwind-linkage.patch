--- llvm-3.8.0.src/projects/libunwind/src/CMakeLists.txt.omv~	2016-01-29 01:34:56.378182708 +0100
+++ llvm-3.8.0.src/projects/libunwind/src/CMakeLists.txt	2016-01-29 01:39:00.377785657 +0100
@@ -49,11 +49,8 @@ set(LIBUNWIND_SOURCES
     ${LIBUNWIND_C_SOURCES}
     ${LIBUNWIND_ASM_SOURCES})
 
-if (LIBUNWIND_ENABLE_SHARED)
-  add_library(unwind SHARED ${LIBUNWIND_SOURCES} ${LIBUNWIND_HEADERS})
-else()
-  add_library(unwind STATIC ${LIBUNWIND_SOURCES} ${LIBUNWIND_HEADERS})
-endif ()
+add_library(unwind SHARED ${LIBUNWIND_SOURCES} ${LIBUNWIND_HEADERS})
+add_library(unwindStatic STATIC ${LIBUNWIND_SOURCES} ${LIBUNWIND_HEADERS})
 
 # Generate library list.
 set(libraries ${LIBUNWINDCXX_ABI_LIBRARIES})
@@ -62,6 +59,7 @@ append_if(libraries LIBUNWIND_HAS_DL_LIB
 append_if(libraries LIBUNWIND_HAS_PTHREAD_LIB pthread)
 
 target_link_libraries(unwind ${libraries})
+target_link_libraries(unwindStatic ${libraries})
 
 # Setup flags.
 append_if(LIBUNWIND_COMPILE_FLAGS LIBUNWIND_HAS_FPIC_FLAG -fPIC)
@@ -106,7 +104,19 @@ set_target_properties(unwind
 set_property(SOURCE ${LIBUNWIND_CXX_SOURCES}
              APPEND_STRING PROPERTY COMPILE_FLAGS "${LIBUNWIND_CXX_FLAGS}")
 
+set_target_properties(unwindStatic
+                      PROPERTIES
+                        COMPILE_FLAGS "${CMAKE_COMPILE_FLAGS} ${LIBUNWIND_COMPILE_FLAGS}"
+                        LINK_FLAGS    "${CMAKE_LINK_FLAGS} ${LIBUNWIND_LINK_FLAGS}"
+                        OUTPUT_NAME   "unwind"
+                        VERSION       "1.0"
+                        SOVERSION     "1")
+
 install(TARGETS unwind
         LIBRARY DESTINATION lib${LLVM_LIBDIR_SUFFIX}
         ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX})
 
+install(TARGETS unwindStatic
+        LIBRARY DESTINATION lib${LLVM_LIBDIR_SUFFIX}
+        ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX})
+
--- llvm-3.8.0.src/tools/clang/lib/Driver/ToolChain.cpp.omv~	2016-01-29 01:30:16.368838917 +0100
+++ llvm-3.8.0.src/tools/clang/lib/Driver/ToolChain.cpp	2016-01-29 01:30:33.589734817 +0100
@@ -624,6 +624,7 @@ void ToolChain::AddCXXStdlibLibArgs(cons
 
   case ToolChain::CST_Libstdcxx:
     CmdArgs.push_back("-lstdc++");
+    CmdArgs.push_back("-lunwind");
     break;
   }
 }
--- llvm-3.8.0.src/tools/clang/lib/Driver/Tools.cpp.omv~	2016-01-29 01:32:56.192884927 +0100
+++ llvm-3.8.0.src/tools/clang/lib/Driver/Tools.cpp	2016-01-29 01:33:44.257602738 +0100
@@ -6193,6 +6193,7 @@ void gcc::Common::ConstructJob(Compilati
       // Reverse translate some rewritten options.
       if (A.getOption().matches(options::OPT_Z_reserved_lib_stdcxx)) {
         CmdArgs.push_back("-lstdc++");
+        CmdArgs.push_back("-lunwind");
         continue;
       }
 
@@ -10307,6 +10308,7 @@ void tools::Myriad::Linker::ConstructJob
   if (UseDefaultLibs) {
     if (C.getDriver().CCCIsCXX())
       CmdArgs.push_back("-lstdc++");
+      CmdArgs.push_back("-lunwind");
     if (T.getOS() == llvm::Triple::RTEMS) {
       CmdArgs.push_back("--start-group");
       CmdArgs.push_back("-lc");
@@ -10528,11 +10530,13 @@ static void ConstructGoldLinkJob(const T
       CmdArgs.push_back("-lcompiler_rt");
     if (Args.hasArg(options::OPT_static)) {
       CmdArgs.push_back("-lstdc++");
+      CmdArgs.push_back("-lunwind");
     } else if (Args.hasArg(options::OPT_pg)) {
       CmdArgs.push_back("-lgcc_eh_p");
     } else {
       CmdArgs.push_back("--as-needed");
       CmdArgs.push_back("-lstdc++");
+      CmdArgs.push_back("-lunwind");
       CmdArgs.push_back("--no-as-needed");
     }
 
@@ -10571,11 +10575,13 @@ static void ConstructGoldLinkJob(const T
 
     if (Args.hasArg(options::OPT_static)) {
       CmdArgs.push_back("-lstdc++");
+      CmdArgs.push_back("-lunwind");
     } else if (Args.hasArg(options::OPT_pg)) {
       CmdArgs.push_back("-lgcc_eh_p");
     } else {
       CmdArgs.push_back("--as-needed");
       CmdArgs.push_back("-lstdc++");
+      CmdArgs.push_back("-lunwind");
       CmdArgs.push_back("--no-as-needed");
     }
   }
