--- libcxx-3.7.0.src/include/__config.0000~	2015-06-18 01:31:45.000000000 +0200
+++ libcxx-3.7.0.src/include/__config	2015-06-23 23:12:07.322303804 +0200
@@ -342,15 +342,28 @@ typedef __char32_t char32_t;
 #define _LIBCPP_HAS_QUICK_EXIT
 #elif defined(__linux__)
 #include <features.h>
+#ifdef __GLIBC_PREREQ
 #if __GLIBC_PREREQ(2, 15)
 #define _LIBCPP_HAS_QUICK_EXIT
 #endif
 #if __GLIBC_PREREQ(2, 17)
 #define _LIBCPP_HAS_C11_FEATURES
 #endif
+#else
+/* Linux, but not __ANDROID__ or __GLIBC__ is likely musl
+   (uClibc defines a compat__GLIBC__ macro). */
+#define _LIBCPP_HAS_QUICK_EXIT
+#define _LIBCPP_HAS_C11_FEATURES
+#endif
 #endif
 #endif
 
+#if defined(__linux__) && !defined(__ANDROID__) && !defined(__GLIBC__)
+/* musl */
+#define _LIBCPP_LIBC_HAS_ISXXX_L
+#define _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE
+#endif
+
 #if (__has_feature(cxx_noexcept))
 #  define _NOEXCEPT noexcept
 #  define _NOEXCEPT_(x) noexcept(x)
--- libcxx-3.7.0.src/include/__locale.0000~	2015-03-11 18:00:28.000000000 +0100
+++ libcxx-3.7.0.src/include/__locale	2015-06-23 23:10:31.404720943 +0200
@@ -37,7 +37,11 @@
 #elif (defined(__GLIBC__) || defined(__APPLE__)      || defined(__FreeBSD__) \
     || defined(__EMSCRIPTEN__) || defined(__IBMCPP__))
 # include <xlocale.h>
-#endif // __GLIBC__ || __APPLE__ || __FreeBSD__ || __sun__ || __EMSCRIPTEN__ || __IBMCPP__
+#elif defined(__linux__)
+/* Linux but not __GLIBC__ and not __ANDROID__ is likely musl.
+   no strtoX_l functions here as of 1.1.9. */
+# include <support/xlocale/xlocale.h>
+#endif // __linux__
 
 #if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
 #pragma GCC system_header
--- libcxx-3.7.0.src/include/support/xlocale/xlocale.h.0000~	2014-09-19 22:09:12.000000000 +0200
+++ libcxx-3.7.0.src/include/support/xlocale/xlocale.h	2015-06-23 23:10:31.405720939 +0200
@@ -18,10 +18,13 @@
 #ifndef _LIBCPP_SUPPORT_XLOCALE_XLOCALE_H
 #define _LIBCPP_SUPPORT_XLOCALE_XLOCALE_H
 
+#include <stdlib.h>
+
 #ifdef __cplusplus
 extern "C" {
 #endif
 
+#ifndef _LIBCPP_LIBC_HAS_ISXXX_L
 static inline int isalnum_l(int c, locale_t) {
   return isalnum(c);
 }
@@ -160,6 +163,7 @@ static inline size_t wcsxfrm_l(wchar_t *
 static inline long double strtold_l(const char *nptr, char **endptr, locale_t) {
   return strtold(nptr, endptr);
 }
+#endif
 
 static inline long long strtoll_l(const char *nptr, char **endptr, int base,
                                   locale_t) {
