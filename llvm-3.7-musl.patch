--- llvm-3.9.0.src/include/llvm/Analysis/TargetLibraryInfo.h.musl1~	2016-06-18 13:22:16.771133519 +0200
+++ llvm-3.9.0.src/include/llvm/Analysis/TargetLibraryInfo.h	2016-06-18 13:24:14.935875184 +0200
@@ -18,6 +18,17 @@
 #include "llvm/IR/PassManager.h"
 #include "llvm/Pass.h"
 
+#ifndef __GLIBC__ // for musl
+#undef fopen64
+#undef fseeko64
+#undef fstat64
+#undef fstatvfs64
+#undef ftello64
+#undef lstat64
+#undef stat64
+#undef tmpfile64
+#endif
+
 namespace llvm {
 template <typename T> class ArrayRef;
 
--- llvm-3.9.0.src/lib/Analysis/TargetLibraryInfo.cpp.musl1~	2016-06-17 02:11:01.000000000 +0200
+++ llvm-3.9.0.src/lib/Analysis/TargetLibraryInfo.cpp	2016-06-18 13:22:16.772133509 +0200
@@ -373,14 +373,15 @@ static void initialize(TargetLibraryInfo
   }
 
   // The following functions are available on at least Linux:
-  if (!T.isOSLinux()) {
+  if (!T.isOSLinux())
+    TLI.setUnavailable(LibFunc::memalign);
+  if (1 /*!T.isGlibc()*/) {
     TLI.setUnavailable(LibFunc::dunder_strdup);
     TLI.setUnavailable(LibFunc::dunder_strtok_r);
     TLI.setUnavailable(LibFunc::dunder_isoc99_scanf);
     TLI.setUnavailable(LibFunc::dunder_isoc99_sscanf);
     TLI.setUnavailable(LibFunc::under_IO_getc);
     TLI.setUnavailable(LibFunc::under_IO_putc);
-    TLI.setUnavailable(LibFunc::memalign);
     TLI.setUnavailable(LibFunc::fopen64);
     TLI.setUnavailable(LibFunc::fseeko64);
     TLI.setUnavailable(LibFunc::fstat64);
--- llvm-3.9.0.src/lib/Support/DynamicLibrary.cpp.musl1~	2015-06-09 17:57:30.000000000 +0200
+++ llvm-3.9.0.src/lib/Support/DynamicLibrary.cpp	2016-06-18 13:22:16.772133509 +0200
@@ -138,7 +138,7 @@ void* DynamicLibrary::SearchForAddressOf
 
 // This macro returns the address of a well-known, explicit symbol
 #define EXPLICIT_SYMBOL(SYM) \
-   if (!strcmp(symbolName, #SYM)) return &SYM
+   if (!strcmp(symbolName, #SYM)) return (void *) &SYM
 
 // On linux we have a weird situation. The stderr/out/in symbols are both
 // macros and global variables because of standards requirements. So, we
--- llvm-3.9.0.src/lib/Support/Unix/Signals.inc.musl1~	2016-06-18 13:22:16.772133509 +0200
+++ llvm-3.9.0.src/lib/Support/Unix/Signals.inc	2016-06-18 13:23:24.975408595 +0200
@@ -393,7 +393,7 @@ static int unwindBacktrace(void **StackT
 // On glibc systems we have the 'backtrace' function, which works nicely, but
 // doesn't demangle symbols.
 void llvm::sys::PrintStackTrace(raw_ostream &OS) {
-#if defined(ENABLE_BACKTRACES)
+#if defined(__GLIBC__) && defined(ENABLE_BACKTRACES)
   static void *StackTrace[256];
   int depth = 0;
 #if defined(HAVE_BACKTRACE)
--- llvm-3.9.0.src/utils/unittest/googletest/src/gtest.cc.musl1~	2015-04-11 04:11:45.000000000 +0200
+++ llvm-3.9.0.src/utils/unittest/googletest/src/gtest.cc	2016-06-18 13:22:16.773133498 +0200
@@ -120,6 +120,7 @@
 
 #if GTEST_CAN_STREAM_RESULTS_
 # include <arpa/inet.h>  // NOLINT
+# include <sys/socket.h>  // NOLINT
 # include <netdb.h>  // NOLINT
 #endif
 
