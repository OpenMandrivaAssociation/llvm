--- llvm-3.7.0.src/include/llvm/Analysis/TargetLibraryInfo.h.musl1~	2015-05-25 22:07:04.601466300 +0200
+++ llvm-3.7.0.src/include/llvm/Analysis/TargetLibraryInfo.h	2015-05-25 22:08:25.153178450 +0200
@@ -18,6 +18,15 @@
 #include "llvm/IR/Module.h"
 #include "llvm/Pass.h"
 
+#undef fopen64
+#undef fseeko64
+#undef fstat64
+#undef fstatvfs64
+#undef ftello64
+#undef lstat64
+#undef stat64
+#undef tmpfile64
+
 namespace llvm {
 /// VecDesc - Describes a possible vectorization of a function.
 /// Function 'VectorFnName' is equivalent to 'ScalarFnName' vectorized
--- llvm-3.7.0.src/lib/Analysis/TargetLibraryInfo.cpp.musl1~	2015-05-07 19:11:51.000000000 +0200
+++ llvm-3.7.0.src/lib/Analysis/TargetLibraryInfo.cpp	2015-05-25 22:07:04.601466300 +0200
@@ -336,14 +336,15 @@ static void initialize(TargetLibraryInfo
   }
 
   // The following functions are available on at least Linux:
-  if (!T.isOSLinux()) {
+  if (!T.isOSLinux())
+    TLI.setUnavailable(LibFunc::memalign);
+  if (1 /*!T.isGlibc()*/) {
     TLI.setUnavailable(LibFunc::dunder_strdup);
     TLI.setUnavailable(LibFunc::dunder_strtok_r);
     TLI.setUnavailable(LibFunc::dunder_isoc99_scanf);
     TLI.setUnavailable(LibFunc::dunder_isoc99_sscanf);
     TLI.setUnavailable(LibFunc::under_IO_getc);
     TLI.setUnavailable(LibFunc::under_IO_putc);
-    TLI.setUnavailable(LibFunc::memalign);
     TLI.setUnavailable(LibFunc::fopen64);
     TLI.setUnavailable(LibFunc::fseeko64);
     TLI.setUnavailable(LibFunc::fstat64);
--- llvm-3.7.0.src/lib/Support/DynamicLibrary.cpp.musl1~	2014-08-27 19:51:43.000000000 +0200
+++ llvm-3.7.0.src/lib/Support/DynamicLibrary.cpp	2015-05-25 22:07:04.601466300 +0200
@@ -138,7 +138,7 @@ void* DynamicLibrary::SearchForAddressOf
 
 // This macro returns the address of a well-known, explicit symbol
 #define EXPLICIT_SYMBOL(SYM) \
-   if (!strcmp(symbolName, #SYM)) return &SYM
+   if (!strcmp(symbolName, #SYM)) return (void *) &SYM
 
 // On linux we have a weird situation. The stderr/out/in symbols are both
 // macros and global variables because of standards requirements. So, we
--- llvm-3.7.0.src/lib/Support/Unix/Signals.inc.musl1~	2015-05-25 22:07:04.601466300 +0200
+++ llvm-3.7.0.src/lib/Support/Unix/Signals.inc	2015-05-25 22:09:37.076811325 +0200
@@ -430,7 +430,7 @@ static bool printSymbolizedStackTrace(vo
 // On glibc systems we have the 'backtrace' function, which works nicely, but
 // doesn't demangle symbols.
 void llvm::sys::PrintStackTrace(raw_ostream &OS) {
-#if defined(HAVE_BACKTRACE) && defined(ENABLE_BACKTRACES)
+#if defined(__GLIBC__) && defined(HAVE_BACKTRACE) && defined(ENABLE_BACKTRACES)
   static void* StackTrace[256];
   // Use backtrace() to output a backtrace on Linux systems with glibc.
   int depth = backtrace(StackTrace,
--- llvm-3.7.0.src/utils/unittest/googletest/src/gtest.cc.musl1~	2015-04-11 04:11:45.000000000 +0200
+++ llvm-3.7.0.src/utils/unittest/googletest/src/gtest.cc	2015-05-25 22:07:04.602466309 +0200
@@ -120,6 +120,7 @@
 
 #if GTEST_CAN_STREAM_RESULTS_
 # include <arpa/inet.h>  // NOLINT
+# include <sys/socket.h>  // NOLINT
 # include <netdb.h>  // NOLINT
 #endif
 
