--- llvm-4.0.0.src/include/llvm/Analysis/TargetLibraryInfo.h.musl1~	2016-10-01 05:10:48.000000000 +0200
+++ llvm-4.0.0.src/include/llvm/Analysis/TargetLibraryInfo.h	2016-10-04 01:50:21.369335848 +0200
@@ -18,6 +18,17 @@
 #include "llvm/IR/PassManager.h"
 #include "llvm/Pass.h"
 
+#ifndef __GLIBC__ // for musl
+#undef fopen64
+#undef fseeko64
+#undef fstat64
+#undef fstatvfs64
+#undef ftello64
+#undef lstat64
+#undef stat64
+#undef tmpfile64
+#endif
+
 namespace llvm {
 template <typename T> class ArrayRef;
 
--- llvm-4.0.0.src/lib/Analysis/TargetLibraryInfo.cpp.musl1~	2016-10-01 05:10:48.000000000 +0200
+++ llvm-4.0.0.src/lib/Analysis/TargetLibraryInfo.cpp	2016-10-04 01:50:21.369335848 +0200
@@ -376,14 +376,15 @@ static void initialize(TargetLibraryInfo
   }
 
   // The following functions are available on at least Linux:
-  if (!T.isOSLinux()) {
+  if (!T.isOSLinux())
+    TLI.setUnavailable(LibFunc::memalign);
+  if (1 /*!T.isGlibc()*/) {
     TLI.setUnavailable(LibFunc::dunder_strdup);
     TLI.setUnavailable(LibFunc::dunder_strtok_r);
     TLI.setUnavailable(LibFunc::dunder_isoc99_scanf);
     TLI.setUnavailable(LibFunc::dunder_isoc99_sscanf);
     TLI.setUnavailable(LibFunc::under_IO_getc);
     TLI.setUnavailable(LibFunc::under_IO_putc);
-    TLI.setUnavailable(LibFunc::memalign);
     TLI.setUnavailable(LibFunc::fopen64);
     TLI.setUnavailable(LibFunc::fseeko64);
     TLI.setUnavailable(LibFunc::fstat64);
--- llvm-4.0.0.src/lib/Support/DynamicLibrary.cpp.musl1~	2015-06-09 17:57:30.000000000 +0200
+++ llvm-4.0.0.src/lib/Support/DynamicLibrary.cpp	2016-10-04 01:50:21.369335848 +0200
@@ -138,7 +138,7 @@ void* DynamicLibrary::SearchForAddressOf
 
 // This macro returns the address of a well-known, explicit symbol
 #define EXPLICIT_SYMBOL(SYM) \
-   if (!strcmp(symbolName, #SYM)) return &SYM
+   if (!strcmp(symbolName, #SYM)) return (void *) &SYM
 
 // On linux we have a weird situation. The stderr/out/in symbols are both
 // macros and global variables because of standards requirements. So, we
--- llvm-4.0.0.src/lib/Support/Unix/Signals.inc.musl1~	2016-10-04 01:50:21.369335848 +0200
+++ llvm-4.0.0.src/lib/Support/Unix/Signals.inc	2016-10-04 01:51:20.207439046 +0200
@@ -298,7 +298,7 @@ void llvm::sys::AddSignalHandler(void (*
   RegisterHandlers();
 }
 
-#if defined(HAVE_BACKTRACE) && ENABLE_BACKTRACES && HAVE_LINK_H &&    \
+#if defined(HAVE_BACKTRACE) && defined(__GLIBC__) && ENABLE_BACKTRACES && HAVE_LINK_H &&    \
     (defined(__linux__) || defined(__FreeBSD__) ||                             \
      defined(__FreeBSD_kernel__) || defined(__NetBSD__))
 struct DlIteratePhdrData {
--- llvm-4.0.0.src/utils/unittest/googletest/src/gtest.cc.musl1~	2015-04-11 04:11:45.000000000 +0200
+++ llvm-4.0.0.src/utils/unittest/googletest/src/gtest.cc	2016-10-04 01:50:21.370335833 +0200
@@ -120,6 +120,7 @@
 
 #if GTEST_CAN_STREAM_RESULTS_
 # include <arpa/inet.h>  // NOLINT
+# include <sys/socket.h>  // NOLINT
 # include <netdb.h>  // NOLINT
 #endif
 
