diff -up llvm-project-release-17.x/clang/lib/Driver/ToolChains/Linux.cpp.13~ llvm-project-release-17.x/clang/lib/Driver/ToolChains/Linux.cpp
--- llvm-project-release-17.x/clang/lib/Driver/ToolChains/Linux.cpp.13~	2023-07-28 12:53:59.973831416 +0200
+++ llvm-project-release-17.x/clang/lib/Driver/ToolChains/Linux.cpp	2023-07-28 12:56:58.821508870 +0200
@@ -316,6 +316,7 @@ Linux::Linux(const Driver &D, const llvm
         Paths);
   }
 
+  addPathIfExists(D, SysRoot + "/usr/" + MultiarchTriple + "/lib", Paths); // OMV 5.x+
   addPathIfExists(D, concat(SysRoot, "/usr/lib", MultiarchTriple), Paths);
   // 64-bit OpenEmbedded sysroots may not have a /usr/lib dir. So they cannot
   // find /usr/lib64 as it is referenced as /usr/lib/../lib64. So we handle
@@ -331,7 +332,12 @@ Linux::Linux(const Driver &D, const llvm
     addPathIfExists(D, concat(SysRoot, "/usr", OSLibDir, ABIName), Paths);
   }
 
+#if 0
+  // This is actually harmful unconditionally because it adds
+  //         /usr/bin/../lib64/gcc/x86_64-openmandriva-linux-gnu/10.0.0/../../..
+  // ( == /usr/lib64 ) even in -m32 mode. Let's NOT do it.
   Generic_GCC::AddMultiarchPaths(D, SysRoot, OSLibDir, Paths);
+#endif
 
   addPathIfExists(D, concat(SysRoot, "/lib"), Paths);
   addPathIfExists(D, concat(SysRoot, "/usr/lib"), Paths);
