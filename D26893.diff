--- llvm-4.0.0.src/tools/clang/lib/Sema/SemaTemplateDeduction.cpp.templateFix~	2017-01-01 16:13:13.665113575 +0100
+++ llvm-4.0.0.src/tools/clang/lib/Sema/SemaTemplateDeduction.cpp	2017-01-01 16:15:24.409514499 +0100
@@ -1895,7 +1895,7 @@ DeduceTemplateArguments(Sema &S, Templat
 
       // Check whether we have enough arguments.
       if (!hasTemplateArgumentForDeduction(Args, ArgIdx))
-        return NumberOfArgumentsMustMatch ? Sema::TDK_TooFewArguments
+        return NumberOfArgumentsMustMatch ? Sema::TDK_MiscellaneousDeductionFailure
                                           : Sema::TDK_Success;
 
       // C++1z [temp.deduct.type]p9:
--- llvm-4.0.0.src/tools/clang/test/SemaTemplate/deduction.cpp.templateFix~	2016-12-24 05:20:31.000000000 +0100
+++ llvm-4.0.0.src/tools/clang/test/SemaTemplate/deduction.cpp	2017-01-01 16:13:13.665113575 +0100
@@ -348,3 +348,14 @@ namespace deduction_substitution_failure
   template<typename T> int B<T, typename Fail<T>::error> {}; // expected-note {{instantiation of}}
   int bi = B<char, char>; // expected-note {{during template argument deduction for variable template partial specialization 'B<T, typename Fail<T>::error>' [with T = char]}}
 }
+
+namespace PR31043 {
+template <class... Ts>
+struct tuple {};
+
+template <class T>
+int foo(tuple<T>); // expected-note{{candidate template ignored: failed template argument deduction}}
+
+int z = foo(tuple<>{}); // expected-error{{no matching function call to 'foo'}}
+}
+
