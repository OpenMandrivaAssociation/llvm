diff -up llvm-project-llvmorg-21.1.0-rc1/clang/include/clang/Driver/Distro.h.1~ llvm-project-llvmorg-21.1.0-rc1/clang/include/clang/Driver/Distro.h
--- llvm-project-llvmorg-21.1.0-rc1/clang/include/clang/Driver/Distro.h.1~	2025-07-17 21:02:34.000000000 +0200
+++ llvm-project-llvmorg-21.1.0-rc1/clang/include/clang/Driver/Distro.h	2025-07-18 01:34:53.525305314 +0200
@@ -84,6 +84,7 @@ public:
     UbuntuOracular,
     UbuntuPlucky,
     UbuntuQuesting,
+    OpenMandriva,
     UnknownDistro
   };
 
@@ -142,6 +143,8 @@ public:
 
   bool IsGentoo() const { return DistroVal == Gentoo; }
 
+  bool IsOpenMandriva() const { return DistroVal == OpenMandriva; }
+
   /// @}
 };
 
diff -up llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/Distro.cpp.1~ llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/Distro.cpp
--- llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/Distro.cpp.1~	2025-07-17 21:02:34.000000000 +0200
+++ llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/Distro.cpp	2025-07-18 01:34:18.750359618 +0200
@@ -43,6 +43,8 @@ static Distro::DistroType DetectOsReleas
                     .Case("sles", Distro::OpenSUSE)
                     .Case("opensuse", Distro::OpenSUSE)
                     .Case("exherbo", Distro::Exherbo)
+                    .Case("openmandriva", Distro::OpenMandriva)
+                    .Case("\"openmandriva\"", Distro::OpenMandriva)
                     .Default(Distro::UnknownDistro);
   return Version;
 }
diff -up llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/ToolChains/Gnu.cpp.1~ llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/ToolChains/Gnu.cpp
--- llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/ToolChains/Gnu.cpp.1~	2025-07-17 21:02:34.000000000 +0200
+++ llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/ToolChains/Gnu.cpp	2025-07-18 01:34:18.750587588 +0200
@@ -2339,7 +2339,9 @@ void Generic_GCC::GCCInstallationDetecto
   // lists should shrink over time. Please don't add more elements to *Triples.
   static const char *const AArch64LibDirs[] = {"/lib64", "/lib"};
   static const char *const AArch64Triples[] = {
-      "aarch64-none-linux-gnu", "aarch64-redhat-linux", "aarch64-suse-linux"};
+      "aarch64-none-linux-gnu", "aarch64-redhat-linux", "aarch64-suse-linux",
+      "aarch64-openmandriva-linux-gnu", "aarch64-openmandriva-linux-musl",
+      "aarch64-openmandriva-linux-uclibc"};
   static const char *const AArch64beLibDirs[] = {"/lib"};
   static const char *const AArch64beTriples[] = {"aarch64_be-none-linux-gnu"};
 
@@ -2348,7 +2350,28 @@ void Generic_GCC::GCCInstallationDetecto
   static const char *const ARMHFTriples[] = {"arm-linux-gnueabihf",
                                              "armv7hl-redhat-linux-gnueabi",
                                              "armv6hl-suse-linux-gnueabi",
-                                             "armv7hl-suse-linux-gnueabi"};
+                                             "armv7hl-suse-linux-gnueabi",
+                                             "armv7l-openmandriva-linux-gnueabihf",
+                                             "armv7hl-openmandriva-linux-gnueabihf",
+                                             "armv7hnl-openmandriva-linux-gnueabihf",
+                                             "armv8l-openmandriva-linux-gnueabihf",
+                                             "armv8hl-openmandriva-linux-gnueabihf",
+                                             "armv8hnl-openmandriva-linux-gnueabihf",
+                                             "armv8hcnl-openmandriva-linux-gnueabihf",
+                                             "armv7l-openmandriva-linux-musleabihf",
+                                             "armv7hl-openmandriva-linux-musleabihf",
+                                             "armv7hnl-openmandriva-linux-musleabihf",
+                                             "armv8l-openmandriva-linux-musleabihf",
+                                             "armv8hl-openmandriva-linux-musleabihf",
+                                             "armv8hnl-openmandriva-linux-musleabihf",
+                                             "armv8hcnl-openmandriva-linux-musleabihf",
+                                             "armv7l-openmandriva-linux-uclibceabihf",
+                                             "armv7hl-openmandriva-linux-uclibceabihf",
+                                             "armv7hnl-openmandriva-linux-uclibceabihf",
+                                             "armv8l-openmandriva-linux-uclibceabihf",
+                                             "armv8hl-openmandriva-linux-uclibceabihf",
+                                             "armv8hnl-openmandriva-linux-uclibceabihf",
+                                             "armv8hcnl-openmandriva-linux-uclibceabihf"};
   static const char *const ARMebLibDirs[] = {"/lib"};
   static const char *const ARMebTriples[] = {"armeb-linux-gnueabi"};
   static const char *const ARMebHFTriples[] = {
@@ -2367,20 +2390,31 @@ void Generic_GCC::GCCInstallationDetecto
       "x86_64-pc-linux-gnu",    "x86_64-redhat-linux6E",
       "x86_64-redhat-linux",    "x86_64-suse-linux",
       "x86_64-manbo-linux-gnu", "x86_64-slackware-linux",
-      "x86_64-unknown-linux",   "x86_64-amazon-linux"};
+      "x86_64-unknown-linux",   "x86_64-amazon-linux",
+      "x86_64-openmandriva-linux-gnu", "x86_64-openmandriva-linux-musl",
+      "x86_64-openmandriva-linux-uclibc"
+  };
   static const char *const X32Triples[] = {"x86_64-linux-gnux32",
-                                           "x86_64-pc-linux-gnux32"};
+                                           "x86_64-pc-linux-gnux32",
+                                           "x86_64-openmandriva-linux-gnux32",
+                                           "x86_64-openmandriva-linux-muslx32",
+                                           "x86_64-openmandriva-linux-uclibcx32",
+  };
   static const char *const X32LibDirs[] = {"/libx32", "/lib"};
   static const char *const X86LibDirs[] = {"/lib32", "/lib"};
   static const char *const X86Triples[] = {
       "i586-linux-gnu",      "i686-linux-gnu",        "i686-pc-linux-gnu",
       "i386-redhat-linux6E", "i686-redhat-linux",     "i386-redhat-linux",
-      "i586-suse-linux",     "i686-montavista-linux",
+      "i586-suse-linux",     "i686-montavista-linux", "i686-openmandriva-linux-gnu",
+      "i686-openmandriva-linux-musl", "i686-openmandriva-linux-uclibc"
   };
 
   static const char *const LoongArch64LibDirs[] = {"/lib64", "/lib"};
   static const char *const LoongArch64Triples[] = {
-      "loongarch64-linux-gnu", "loongarch64-unknown-linux-gnu"};
+      "loongarch64-linux-gnu", "loongarch64-unknown-linux-gnu",
+      "loongarch64-openmandriva-linux-gnu", "loongarch64-openmandriva-linux-musl",
+      "loongarch64-openmandriva-linux-uclibc"
+  };
 
   static const char *const M68kLibDirs[] = {"/lib"};
   static const char *const M68kTriples[] = {"m68k-unknown-linux-gnu",
@@ -2426,18 +2460,33 @@ void Generic_GCC::GCCInstallationDetecto
   static const char *const PPC64LibDirs[] = {"/lib64", "/lib"};
   static const char *const PPC64Triples[] = {"powerpc64-unknown-linux-gnu",
                                              "powerpc64-suse-linux",
-                                             "ppc64-redhat-linux"};
+                                             "ppc64-redhat-linux",
+                                             "ppc64-openmandriva-linux-gnu",
+                                             "ppc64-openmandriva-linux-musl",
+                                             "ppc64-openmandriva-linux-uclibc"
+  };
   static const char *const PPC64LELibDirs[] = {"/lib64", "/lib"};
   static const char *const PPC64LETriples[] = {
       "powerpc64le-unknown-linux-gnu", "powerpc64le-none-linux-gnu",
-      "powerpc64le-suse-linux", "ppc64le-redhat-linux"};
+      "powerpc64le-suse-linux", "ppc64le-redhat-linux",
+      "ppc64le-openmandriva-linux-gnu", "ppc64le-openmandriva-linux-musl",
+      "ppc64le-openmandriva-linux-uclibc"
+  };
 
   static const char *const RISCV32LibDirs[] = {"/lib32", "/lib"};
   static const char *const RISCV32Triples[] = {"riscv32-unknown-linux-gnu",
-                                               "riscv32-unknown-elf"};
+                                               "riscv32-unknown-elf",
+					       "riscv32-openmandriva-linux-gnu",
+					       "riscv32-openmandriva-linux-musl",
+					       "riscv32-openmandriva-linux-uclibc"
+  };
   static const char *const RISCV64LibDirs[] = {"/lib64", "/lib"};
   static const char *const RISCV64Triples[] = {"riscv64-unknown-linux-gnu",
-                                               "riscv64-unknown-elf"};
+                                               "riscv64-unknown-elf",
+                                               "riscv64-openmandriva-linux-gnu",
+                                               "riscv64-openmandriva-linux-musl",
+                                               "riscv64-openmandriva-linux-uclibc"
+  };
 
   static const char *const SPARCv8LibDirs[] = {"/lib32", "/lib"};
   static const char *const SPARCv8Triples[] = {"sparc-linux-gnu",
diff -up llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/ToolChains/Linux.cpp.1~ llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/ToolChains/Linux.cpp
--- llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/ToolChains/Linux.cpp.1~	2025-07-17 21:02:34.000000000 +0200
+++ llvm-project-llvmorg-21.1.0-rc1/clang/lib/Driver/ToolChains/Linux.cpp	2025-07-18 01:34:18.750782246 +0200
@@ -177,7 +177,7 @@ std::string Linux::getMultiarchTriple(co
   return TargetTriple.str();
 }
 
-static StringRef getOSLibDir(const llvm::Triple &Triple, const ArgList &Args) {
+static StringRef getOSLibDir(const Distro &distro, const llvm::Triple &Triple, const ArgList &Args) {
   if (Triple.isMIPS()) {
     // lib32 directory has a special meaning on MIPS targets.
     // It contains N32 ABI binaries. Use this folder if produce
@@ -196,14 +196,15 @@ static StringRef getOSLibDir(const llvm:
   // FIXME: This is a bit of a hack. We should really unify this code for
   // reasoning about oslibdir spellings with the lib dir spellings in the
   // GCCInstallationDetector, but that is a more significant refactoring.
-  if (Triple.getArch() == llvm::Triple::x86 || Triple.isPPC32() ||
-      Triple.getArch() == llvm::Triple::sparc)
+  if (!distro.IsOpenMandriva() &&
+      (Triple.getArch() == llvm::Triple::x86 || Triple.isPPC32() ||
+       Triple.getArch() == llvm::Triple::sparc))
     return "lib32";
 
   if (Triple.getArch() == llvm::Triple::x86_64 && Triple.isX32())
     return "libx32";
 
-  if (Triple.getArch() == llvm::Triple::riscv32)
+  if (!distro.IsOpenMandriva() && Triple.getArch() == llvm::Triple::riscv32)
     return "lib32";
 
   return Triple.isArch32Bit() ? "lib" : "lib64";
@@ -228,7 +229,7 @@ Linux::Linux(const Driver &D, const llvm
   }
 
   if (Distro.IsOpenSUSE() || Distro.IsUbuntu() || Distro.IsAlpineLinux() ||
-      Triple.isAndroid()) {
+      Distro.IsOpenMandriva() || Triple.isAndroid()) {
     ExtraOpts.push_back("-z");
     ExtraOpts.push_back("relro");
   }
@@ -315,7 +316,7 @@ Linux::Linux(const Driver &D, const llvm
   // to the link paths.
   path_list &Paths = getFilePaths();
 
-  const std::string OSLibDir = std::string(getOSLibDir(Triple, Args));
+  const std::string OSLibDir = std::string(getOSLibDir(Distro, Triple, Args));
   const std::string MultiarchTriple = getMultiarchTriple(D, Triple, SysRoot);
 
   // mips32: Debian multilib, we use /libo32, while in other case, /lib is
diff -up llvm-project-llvmorg-21.1.0-rc1/llvm/include/llvm/TargetParser/Triple.h.1~ llvm-project-llvmorg-21.1.0-rc1/llvm/include/llvm/TargetParser/Triple.h
--- llvm-project-llvmorg-21.1.0-rc1/llvm/include/llvm/TargetParser/Triple.h.1~	2025-07-17 21:02:34.000000000 +0200
+++ llvm-project-llvmorg-21.1.0-rc1/llvm/include/llvm/TargetParser/Triple.h	2025-07-18 01:34:18.750884008 +0200
@@ -197,7 +197,8 @@ public:
     SUSE,
     OpenEmbedded,
     Intel,
-    LastVendorType = Intel
+    OpenMandriva,
+    LastVendorType = OpenMandriva
   };
   enum OSType {
     UnknownOS,
@@ -1057,7 +1058,7 @@ public:
     return (getArch() == Triple::ppc64 &&
             ((getOS() == Triple::FreeBSD &&
               (getOSMajorVersion() >= 13 || getOSVersion().empty())) ||
-             getOS() == Triple::OpenBSD || isMusl()));
+             getOS() == Triple::OpenBSD || isMusl()) || getVendor() == VendorType::OpenMandriva);
   }
 
   /// Tests whether the target 32-bit PowerPC uses Secure PLT.
@@ -1066,7 +1067,7 @@ public:
             ((getOS() == Triple::FreeBSD &&
               (getOSMajorVersion() >= 13 || getOSVersion().empty())) ||
              getOS() == Triple::NetBSD || getOS() == Triple::OpenBSD ||
-             isMusl()));
+             isMusl()) || getVendor() == VendorType::OpenMandriva);
   }
 
   /// Tests whether the target is 32-bit RISC-V.
diff -up llvm-project-llvmorg-21.1.0-rc1/llvm/lib/TargetParser/Triple.cpp.1~ llvm-project-llvmorg-21.1.0-rc1/llvm/lib/TargetParser/Triple.cpp
--- llvm-project-llvmorg-21.1.0-rc1/llvm/lib/TargetParser/Triple.cpp.1~	2025-07-17 21:02:34.000000000 +0200
+++ llvm-project-llvmorg-21.1.0-rc1/llvm/lib/TargetParser/Triple.cpp	2025-07-18 01:34:18.751007772 +0200
@@ -268,6 +268,7 @@ StringRef Triple::getVendorTypeName(Vend
   case MipsTechnologies: return "mti";
   case NVIDIA: return "nvidia";
   case OpenEmbedded: return "oe";
+  case OpenMandriva: return "openmandriva";
   case PC: return "pc";
   case SCEI: return "scei";
   case SUSE: return "suse";
@@ -669,6 +670,7 @@ static Triple::VendorType parseVendor(St
       .Case("suse", Triple::SUSE)
       .Case("oe", Triple::OpenEmbedded)
       .Case("intel", Triple::Intel)
+      .Case("openmandriva", Triple::OpenMandriva)
       .Default(Triple::UnknownVendor);
 }
 
