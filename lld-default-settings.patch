diff -up llvm-project-master/lld/ELF/Config.h.14~ llvm-project-master/lld/ELF/Config.h
--- llvm-project-master/lld/ELF/Config.h.14~	2020-06-21 19:00:42.000000000 +0200
+++ llvm-project-master/lld/ELF/Config.h	2020-06-21 19:57:06.345779527 +0200
@@ -133,12 +133,12 @@ struct Configuration {
                   uint64_t>
       callGraphProfile;
   bool allowMultipleDefinition;
-  bool allowShlibUndefined;
+  bool allowShlibUndefined = false;
   bool androidPackDynRelocs;
   bool armHasBlx = false;
   bool armHasMovtMovw = false;
   bool armJ1J2BranchEncoding = false;
-  bool asNeeded = false;
+  bool asNeeded = true;
   bool bsymbolic;
   bool bsymbolicFunctions;
   bool callGraphProfileSort;
@@ -152,15 +152,15 @@ struct Configuration {
   bool ehFrameHdr;
   bool emitLLVM;
   bool emitRelocs;
-  bool enableNewDtags;
+  bool enableNewDtags = true;
   bool executeOnly;
   bool exportDynamic;
   bool fixCortexA53Errata843419;
   bool fixCortexA8;
   bool formatBinary = false;
-  bool gcSections;
+  bool gcSections = true;
   bool gdbIndex;
-  bool gnuHash = false;
+  bool gnuHash = true;
   bool gnuUnique;
   bool hasDynSymTab;
   bool ignoreDataAddressEquality;
@@ -206,7 +206,7 @@ struct Configuration {
   bool useAndroidRelrTags = false;
   bool warnBackrefs;
   std::vector<llvm::GlobPattern> warnBackrefsExclude;
-  bool warnCommon;
+  bool warnCommon = true;
   bool warnIfuncTextrel;
   bool warnMissingEntry;
   bool warnSymbolOrdering;
@@ -235,14 +235,14 @@ struct Configuration {
   bool zWxneeded;
   DiscardPolicy discard;
   GnuStackKind zGnustack;
-  ICFLevel icf;
+  ICFLevel icf = ICFLevel::Safe;
   OrphanHandlingPolicy orphanHandling;
   SortSectionPolicy sortSection;
   StripPolicy strip;
   UnresolvedPolicy unresolvedSymbols;
   Target2Policy target2;
   ARMVFPArgKind armVFPArgs = ARMVFPArgKind::Default;
-  BuildIdKind buildId = BuildIdKind::None;
+  BuildIdKind buildId = BuildIdKind::Sha1;
   SeparateSegmentKind zSeparate;
   ELFKind ekind = ELFNoneKind;
   uint16_t emachine = llvm::ELF::EM_NONE;
@@ -253,7 +253,7 @@ struct Configuration {
   uint64_t zStackSize;
   unsigned ltoPartitions;
   unsigned ltoo;
-  unsigned optimize;
+  unsigned optimize = 1;
   StringRef thinLTOJobs;
   unsigned timeTraceGranularity;
   int32_t splitStackAdjustSize;
diff -up llvm-project-master/lld/ELF/Driver.cpp.14~ llvm-project-master/lld/ELF/Driver.cpp
--- llvm-project-master/lld/ELF/Driver.cpp.14~	2020-06-21 19:00:42.000000000 +0200
+++ llvm-project-master/lld/ELF/Driver.cpp	2020-06-21 19:57:30.194512821 +0200
@@ -635,10 +635,10 @@ static StringRef getDynamicLinker(opt::I
 
 static ICFLevel getICF(opt::InputArgList &args) {
   auto *arg = args.getLastArg(OPT_icf_none, OPT_icf_safe, OPT_icf_all);
-  if (!arg || arg->getOption().getID() == OPT_icf_none)
-    return ICFLevel::None;
-  if (arg->getOption().getID() == OPT_icf_safe)
+  if (!arg || arg->getOption().getID() == OPT_icf_safe)
     return ICFLevel::Safe;
+  if (arg->getOption().getID() == OPT_icf_none)
+    return ICFLevel::None;
   return ICFLevel::All;
 }
 
@@ -714,7 +714,7 @@ getBuildId(opt::InputArgList &args) {
     return {BuildIdKind::None, {}};
 
   if (arg->getOption().getID() == OPT_build_id)
-    return {BuildIdKind::Fast, {}};
+    return {BuildIdKind::Sha1, {}};
 
   StringRef s = arg->getValue();
   if (s == "fast")
@@ -921,7 +921,7 @@ static void readConfigs(opt::InputArgLis
                                      !args.hasArg(OPT_relocatable);
   config->fixCortexA8 =
       args.hasArg(OPT_fix_cortex_a8) && !args.hasArg(OPT_relocatable);
-  config->gcSections = args.hasFlag(OPT_gc_sections, OPT_no_gc_sections, false);
+  config->gcSections = args.hasFlag(OPT_gc_sections, OPT_no_gc_sections, true);
   config->gnuUnique = args.hasFlag(OPT_gnu_unique, OPT_no_gnu_unique, true);
   config->gdbIndex = args.hasFlag(OPT_gdb_index, OPT_no_gdb_index, false);
   config->icf = getICF(args);
@@ -1017,7 +1017,7 @@ static void readConfigs(opt::InputArgLis
   config->unresolvedSymbols = getUnresolvedSymbolPolicy(args);
   config->warnBackrefs =
       args.hasFlag(OPT_warn_backrefs, OPT_no_warn_backrefs, false);
-  config->warnCommon = args.hasFlag(OPT_warn_common, OPT_no_warn_common, false);
+  config->warnCommon = args.hasFlag(OPT_warn_common, OPT_no_warn_common, true);
   config->warnIfuncTextrel =
       args.hasFlag(OPT_warn_ifunc_textrel, OPT_no_warn_ifunc_textrel, false);
   config->warnSymbolOrdering =
@@ -1827,7 +1827,7 @@ template <class ELFT> void LinkerDriver:
     if (config->emachine == EM_MIPS)
       config->sysvHash = true;
     else
-      config->sysvHash = config->gnuHash = true;
+      {config->sysvHash = false; config->gnuHash = true;}
   }
 
   // Default output filename is "a.out" by the Unix tradition.
