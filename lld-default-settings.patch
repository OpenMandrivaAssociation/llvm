diff -up llvm-project-release-19.x/lld/ELF/Config.h.19~ llvm-project-release-19.x/lld/ELF/Config.h
--- llvm-project-release-19.x/lld/ELF/Config.h.19~	2024-07-29 13:45:04.000000000 +0200
+++ llvm-project-release-19.x/lld/ELF/Config.h	2024-07-29 22:01:28.436936503 +0200
@@ -222,7 +222,7 @@ struct Config {
   bool armHasMovtMovw = false;
   bool armJ1J2BranchEncoding = false;
   bool armCMSESupport = false;
-  bool asNeeded = false;
+  bool asNeeded = true;
   bool armBe8 = false;
   BsymbolicKind bsymbolic = BsymbolicKind::None;
   CGProfileSortKind callGraphProfileSort;
@@ -242,7 +242,7 @@ struct Config {
   bool ehFrameHdr;
   bool emitLLVM;
   bool emitRelocs;
-  bool enableNewDtags;
+  bool enableNewDtags = true;
   bool enableNonContiguousRegions;
   bool executeOnly;
   bool exportDynamic;
@@ -250,9 +250,9 @@ struct Config {
   bool fixCortexA8;
   bool formatBinary = false;
   bool fortranCommon;
-  bool gcSections;
+  bool gcSections = true;
   bool gdbIndex;
-  bool gnuHash = false;
+  bool gnuHash = true;
   bool gnuUnique;
   bool hasDynSymTab;
   bool ignoreDataAddressEquality;
@@ -309,7 +309,7 @@ struct Config {
   bool useAndroidRelrTags = false;
   bool warnBackrefs;
   llvm::SmallVector<llvm::GlobPattern, 0> warnBackrefsExclude;
-  bool warnCommon;
+  bool warnCommon = true;
   bool warnMissingEntry;
   bool warnSymbolOrdering;
   bool writeAddends;
@@ -340,7 +340,7 @@ struct Config {
   bool zWxneeded;
   DiscardPolicy discard;
   GnuStackKind zGnustack;
-  ICFLevel icf;
+  ICFLevel icf = ICFLevel::Safe;
   OrphanHandlingPolicy orphanHandling;
   SortSectionPolicy sortSection;
   StripPolicy strip;
@@ -350,7 +350,7 @@ struct Config {
   GcsPolicy zGcs;
   bool power10Stubs;
   ARMVFPArgKind armVFPArgs = ARMVFPArgKind::Default;
-  BuildIdKind buildId = BuildIdKind::None;
+  BuildIdKind buildId = BuildIdKind::Sha1;
   SeparateSegmentKind zSeparate;
   ELFKind ekind = ELFNoneKind;
   uint16_t emachine = llvm::ELF::EM_NONE;
@@ -362,7 +362,7 @@ struct Config {
   unsigned ltoPartitions;
   unsigned ltoo;
   llvm::CodeGenOptLevel ltoCgo;
-  unsigned optimize;
+  unsigned optimize = 1;
   StringRef thinLTOJobs;
   unsigned timeTraceGranularity;
   int32_t splitStackAdjustSize;
diff -up llvm-project-release-19.x/lld/ELF/Driver.cpp.19~ llvm-project-release-19.x/lld/ELF/Driver.cpp
--- llvm-project-release-19.x/lld/ELF/Driver.cpp.19~	2024-07-29 22:00:31.308234760 +0200
+++ llvm-project-release-19.x/lld/ELF/Driver.cpp	2024-07-29 22:02:13.073486536 +0200
@@ -824,10 +824,10 @@ static int getMemtagMode(opt::InputArgLi
 
 static ICFLevel getICF(opt::InputArgList &args) {
   auto *arg = args.getLastArg(OPT_icf_none, OPT_icf_safe, OPT_icf_all);
-  if (!arg || arg->getOption().getID() == OPT_icf_none)
-    return ICFLevel::None;
-  if (arg->getOption().getID() == OPT_icf_safe)
+  if (!arg || arg->getOption().getID() == OPT_icf_safe)
     return ICFLevel::Safe;
+  if (arg->getOption().getID() == OPT_icf_none)
+    return ICFLevel::None;
   return ICFLevel::All;
 }
 
@@ -1297,7 +1297,7 @@ static void readConfigs(opt::InputArgLis
       args.hasArg(OPT_fix_cortex_a8) && !args.hasArg(OPT_relocatable);
   config->fortranCommon =
       args.hasFlag(OPT_fortran_common, OPT_no_fortran_common, false);
-  config->gcSections = args.hasFlag(OPT_gc_sections, OPT_no_gc_sections, false);
+  config->gcSections = args.hasFlag(OPT_gc_sections, OPT_no_gc_sections, true);
   config->gnuUnique = args.hasFlag(OPT_gnu_unique, OPT_no_gnu_unique, true);
   config->gdbIndex = args.hasFlag(OPT_gdb_index, OPT_no_gdb_index, false);
   config->icf = getICF(args);
@@ -1456,7 +1456,7 @@ static void readConfigs(opt::InputArgLis
       OPT_use_android_relr_tags, OPT_no_use_android_relr_tags, false);
   config->warnBackrefs =
       args.hasFlag(OPT_warn_backrefs, OPT_no_warn_backrefs, false);
-  config->warnCommon = args.hasFlag(OPT_warn_common, OPT_no_warn_common, false);
+  config->warnCommon = args.hasFlag(OPT_warn_common, OPT_no_warn_common, true);
   config->warnSymbolOrdering =
       args.hasFlag(OPT_warn_symbol_ordering, OPT_no_warn_symbol_ordering, true);
   config->whyExtract = args.getLastArgValue(OPT_why_extract);
@@ -1849,8 +1849,9 @@ static void setConfigs(opt::InputArgList
   if (!args.hasArg(OPT_hash_style)) {
     if (config->emachine == EM_MIPS)
       config->sysvHash = true;
-    else
-      config->sysvHash = config->gnuHash = true;
+    else {
+      config->sysvHash = false; config->gnuHash = true;
+    }
   }
 
   // Set default entry point and output file if not specified by command line or
