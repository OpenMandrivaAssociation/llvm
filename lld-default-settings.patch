diff -up llvm-project-llvmorg-21.1.0-rc1/lld/ELF/Config.h.18~ llvm-project-llvmorg-21.1.0-rc1/lld/ELF/Config.h
--- llvm-project-llvmorg-21.1.0-rc1/lld/ELF/Config.h.18~	2025-07-17 21:02:34.000000000 +0200
+++ llvm-project-llvmorg-21.1.0-rc1/lld/ELF/Config.h	2025-07-18 01:59:19.957984075 +0200
@@ -296,7 +296,7 @@ struct Config {
   bool armHasMovtMovw = false;
   bool armJ1J2BranchEncoding = false;
   bool armCMSESupport = false;
-  bool asNeeded = false;
+  bool asNeeded = true;
   bool armBe8 = false;
   BsymbolicKind bsymbolic = BsymbolicKind::None;
   CGProfileSortKind callGraphProfileSort;
@@ -323,7 +323,7 @@ struct Config {
   bool ehFrameHdr;
   bool emitLLVM;
   bool emitRelocs;
-  bool enableNewDtags;
+  bool enableNewDtags = true;
   bool enableNonContiguousRegions;
   bool executeOnly;
   bool exportDynamic;
@@ -331,9 +331,9 @@ struct Config {
   bool fixCortexA8;
   bool formatBinary = false;
   bool fortranCommon;
-  bool gcSections;
+  bool gcSections = true;
   bool gdbIndex;
-  bool gnuHash = false;
+  bool gnuHash = true;
   bool gnuUnique;
   bool ignoreDataAddressEquality;
   bool ignoreFunctionAddressEquality;
@@ -390,7 +390,7 @@ struct Config {
   bool useAndroidRelrTags = false;
   bool warnBackrefs;
   llvm::SmallVector<llvm::GlobPattern, 0> warnBackrefsExclude;
-  bool warnCommon;
+  bool warnCommon = true;
   bool warnMissingEntry;
   bool warnSymbolOrdering;
   bool writeAddends;
@@ -426,7 +426,7 @@ struct Config {
   ZicfissPolicy zZicfiss;
   DiscardPolicy discard;
   GnuStackKind zGnustack;
-  ICFLevel icf;
+  ICFLevel icf = ICFLevel::Safe;
   OrphanHandlingPolicy orphanHandling;
   SortSectionPolicy sortSection;
   StripPolicy strip;
@@ -436,7 +436,7 @@ struct Config {
   GcsPolicy zGcs;
   bool power10Stubs;
   ARMVFPArgKind armVFPArgs = ARMVFPArgKind::Default;
-  BuildIdKind buildId = BuildIdKind::None;
+  BuildIdKind buildId = BuildIdKind::Sha1;
   SeparateSegmentKind zSeparate;
   ELFKind ekind = ELFNoneKind;
   uint16_t emachine = llvm::ELF::EM_NONE;
@@ -448,7 +448,7 @@ struct Config {
   unsigned ltoPartitions;
   unsigned ltoo;
   llvm::CodeGenOptLevel ltoCgo;
-  unsigned optimize;
+  unsigned optimize = 1;
   StringRef thinLTOJobs;
   unsigned timeTraceGranularity;
   int32_t splitStackAdjustSize;
diff -up llvm-project-llvmorg-21.1.0-rc1/lld/ELF/Driver.cpp.18~ llvm-project-llvmorg-21.1.0-rc1/lld/ELF/Driver.cpp
--- llvm-project-llvmorg-21.1.0-rc1/lld/ELF/Driver.cpp.18~	2025-07-18 01:57:26.589184463 +0200
+++ llvm-project-llvmorg-21.1.0-rc1/lld/ELF/Driver.cpp	2025-07-18 01:57:26.594535133 +0200
@@ -869,10 +869,10 @@ static int getMemtagMode(Ctx &ctx, opt::
 
 static ICFLevel getICF(opt::InputArgList &args) {
   auto *arg = args.getLastArg(OPT_icf_none, OPT_icf_safe, OPT_icf_all);
-  if (!arg || arg->getOption().getID() == OPT_icf_none)
-    return ICFLevel::None;
-  if (arg->getOption().getID() == OPT_icf_safe)
+  if (!arg || arg->getOption().getID() == OPT_icf_safe)
     return ICFLevel::Safe;
+  if (arg->getOption().getID() == OPT_icf_none)
+    return ICFLevel::None;
   return ICFLevel::All;
 }
 
@@ -1431,7 +1431,7 @@ static void readConfigs(Ctx &ctx, opt::I
       args.hasArg(OPT_fix_cortex_a8) && !args.hasArg(OPT_relocatable);
   ctx.arg.fortranCommon =
       args.hasFlag(OPT_fortran_common, OPT_no_fortran_common, false);
-  ctx.arg.gcSections = args.hasFlag(OPT_gc_sections, OPT_no_gc_sections, false);
+  ctx.arg.gcSections = args.hasFlag(OPT_gc_sections, OPT_no_gc_sections, true);
   ctx.arg.gnuUnique = args.hasFlag(OPT_gnu_unique, OPT_no_gnu_unique, true);
   ctx.arg.gdbIndex = args.hasFlag(OPT_gdb_index, OPT_no_gdb_index, false);
   ctx.arg.icf = getICF(args);
@@ -1599,7 +1599,7 @@ static void readConfigs(Ctx &ctx, opt::I
       OPT_use_android_relr_tags, OPT_no_use_android_relr_tags, false);
   ctx.arg.warnBackrefs =
       args.hasFlag(OPT_warn_backrefs, OPT_no_warn_backrefs, false);
-  ctx.arg.warnCommon = args.hasFlag(OPT_warn_common, OPT_no_warn_common, false);
+  ctx.arg.warnCommon = args.hasFlag(OPT_warn_common, OPT_no_warn_common, true);
   ctx.arg.warnSymbolOrdering =
       args.hasFlag(OPT_warn_symbol_ordering, OPT_no_warn_symbol_ordering, true);
   ctx.arg.whyExtract = args.getLastArgValue(OPT_why_extract);
@@ -2029,8 +2029,9 @@ static void setConfigs(Ctx &ctx, opt::In
   if (!args.hasArg(OPT_hash_style)) {
     if (ctx.arg.emachine == EM_MIPS)
       ctx.arg.sysvHash = true;
-    else
-      ctx.arg.sysvHash = ctx.arg.gnuHash = true;
+    else {
+      ctx.arg.sysvHash = false; ctx.arg.gnuHash = true;
+    }
   }
 
   // Set default entry point and output file if not specified by command line or
