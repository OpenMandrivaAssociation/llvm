diff -up llvm-project-release-10.x/clang/lib/Driver/ToolChains/Gnu.cpp.30~ llvm-project-release-10.x/clang/lib/Driver/ToolChains/Gnu.cpp
--- llvm-project-release-10.x/clang/lib/Driver/ToolChains/Gnu.cpp.30~	2020-02-03 17:53:22.376400451 +0100
+++ llvm-project-release-10.x/clang/lib/Driver/ToolChains/Gnu.cpp	2020-02-03 17:55:04.839404969 +0100
@@ -2139,7 +2139,10 @@ void Generic_GCC::GCCInstallationDetecto
   static const char *const RISCV64Triples[] = {"riscv64-unknown-linux-gnu",
                                                "riscv64-linux-gnu",
                                                "riscv64-unknown-elf",
-                                               "riscv64-suse-linux"};
+                                               "riscv64-suse-linux",
+                                               "riscv64-openmandriva-linux",
+                                               "riscv64-openmandriva-linux-gnu",
+                                               "riscv64-openmandriva-linux-musl"};
 
   static const char *const SPARCv8LibDirs[] = {"/lib32", "/lib"};
   static const char *const SPARCv8Triples[] = {"sparc-linux-gnu",
diff -up llvm-project-release-10.x/clang-tools-extra/clangd/CMakeLists.txt.30~ llvm-project-release-10.x/clang-tools-extra/clangd/CMakeLists.txt
--- llvm-project-release-10.x/clang-tools-extra/clangd/CMakeLists.txt.30~	2020-02-03 15:05:29.000000000 +0100
+++ llvm-project-release-10.x/clang-tools-extra/clangd/CMakeLists.txt	2020-02-03 17:53:22.377400451 +0100
@@ -30,9 +30,7 @@ if(CLANG_BUILT_STANDALONE)
 endif()
 
 set(CLANGD_ATOMIC_LIB "")
-if(NOT HAVE_CXX_ATOMICS64_WITHOUT_LIB)
-  list(APPEND CLANGD_ATOMIC_LIB "atomic")
-endif()
+list(APPEND CLANGD_ATOMIC_LIB "atomic")
 
 add_clang_library(clangDaemon
   AST.cpp
diff -up llvm-project-release-10.x/llvm/tools/dsymutil/CMakeLists.txt.30~ llvm-project-release-10.x/llvm/tools/dsymutil/CMakeLists.txt
--- llvm-project-release-10.x/llvm/tools/dsymutil/CMakeLists.txt.30~	2020-02-03 15:05:29.000000000 +0100
+++ llvm-project-release-10.x/llvm/tools/dsymutil/CMakeLists.txt	2020-02-03 17:53:22.377400451 +0100
@@ -37,4 +37,6 @@ add_llvm_tool(dsymutil
 
 if(APPLE)
   target_link_libraries(dsymutil PRIVATE "-framework CoreFoundation")
+else(APPLE)
+  target_link_libraries(dsymutil PRIVATE "-latomic")
 endif(APPLE)
diff -up llvm-project-release-10.x/llvm/utils/benchmark/src/cycleclock.h.30~ llvm-project-release-10.x/llvm/utils/benchmark/src/cycleclock.h
--- llvm-project-release-10.x/llvm/utils/benchmark/src/cycleclock.h.30~	2020-02-03 15:05:29.000000000 +0100
+++ llvm-project-release-10.x/llvm/utils/benchmark/src/cycleclock.h	2020-02-03 17:53:22.377400451 +0100
@@ -180,10 +180,10 @@ inline BENCHMARK_ALWAYS_INLINE int64_t N
   return cycles;
 #endif
 #else
-// The soft failover to a generic implementation is automatic only for ARM.
-// For other platforms the developer is expected to make an attempt to create
-// a fast implementation and use generic version if nothing better is available.
-#error You need to define CycleTimer for your OS and CPU
+  // Generic implementation to make ports to new arches (Hello RISC-V!!!) happy
+  struct timespec ts = { 0, 0 };
+  clock_gettime(CLOCK_MONOTONIC, &ts);
+  return static_cast<int64_t>(ts.tv_sec) * 1000000000 + ts.tv_nsec;
 #endif
 }
 }  // end namespace cycleclock
