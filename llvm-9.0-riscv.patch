diff -up llvm-9.0.0-20190814/clang/lib/Driver/ToolChains/Gnu.cpp.34~ llvm-9.0.0-20190814/clang/lib/Driver/ToolChains/Gnu.cpp
--- llvm-9.0.0-20190814/clang/lib/Driver/ToolChains/Gnu.cpp.34~	2019-08-14 12:35:43.728039331 +0200
+++ llvm-9.0.0-20190814/clang/lib/Driver/ToolChains/Gnu.cpp	2019-08-14 12:35:43.754039425 +0200
@@ -2066,7 +2066,10 @@ void Generic_GCC::GCCInstallationDetecto
   static const char *const RISCV64LibDirs[] = {"/lib64", "/lib"};
   static const char *const RISCV64Triples[] = {"riscv64-unknown-linux-gnu",
                                                "riscv64-linux-gnu",
-                                               "riscv64-unknown-elf"};
+                                               "riscv64-unknown-elf",
+                                               "riscv64-openmandriva-linux-gnu",
+                                               "riscv64-openmandriva-linux-musl",
+  };
 
   static const char *const SPARCv8LibDirs[] = {"/lib32", "/lib"};
   static const char *const SPARCv8Triples[] = {"sparc-linux-gnu",
diff -up llvm-9.0.0-20190814/clang-tools-extra/clangd/CMakeLists.txt.34~ llvm-9.0.0-20190814/clang-tools-extra/clangd/CMakeLists.txt
--- llvm-9.0.0-20190814/clang-tools-extra/clangd/CMakeLists.txt.34~	2019-08-13 14:39:23.000000000 +0200
+++ llvm-9.0.0-20190814/clang-tools-extra/clangd/CMakeLists.txt	2019-08-14 12:35:43.754039425 +0200
@@ -30,9 +30,7 @@ if(CLANG_BUILT_STANDALONE)
 endif()
 
 set(CLANGD_ATOMIC_LIB "")
-if(NOT HAVE_CXX_ATOMICS64_WITHOUT_LIB)
-  list(APPEND CLANGD_ATOMIC_LIB "atomic")
-endif()
+list(APPEND CLANGD_ATOMIC_LIB "atomic")
 
 add_clang_library(clangDaemon
   AST.cpp
diff -up llvm-9.0.0-20190814/llvm/tools/dsymutil/CMakeLists.txt.34~ llvm-9.0.0-20190814/llvm/tools/dsymutil/CMakeLists.txt
--- llvm-9.0.0-20190814/llvm/tools/dsymutil/CMakeLists.txt.34~	2019-08-13 14:39:23.000000000 +0200
+++ llvm-9.0.0-20190814/llvm/tools/dsymutil/CMakeLists.txt	2019-08-14 12:35:43.754039425 +0200
@@ -31,4 +31,6 @@ add_llvm_tool(dsymutil
 
 if(APPLE)
   target_link_libraries(dsymutil PRIVATE "-framework CoreFoundation")
+else(APPLE)
+  target_link_libraries(dsymutil PRIVATE "-latomic")
 endif(APPLE)
diff -up llvm-9.0.0-20190814/llvm/utils/benchmark/src/cycleclock.h.34~ llvm-9.0.0-20190814/llvm/utils/benchmark/src/cycleclock.h
--- llvm-9.0.0-20190814/llvm/utils/benchmark/src/cycleclock.h.34~	2019-08-14 12:35:43.754039425 +0200
+++ llvm-9.0.0-20190814/llvm/utils/benchmark/src/cycleclock.h	2019-08-14 12:37:34.635439007 +0200
@@ -180,10 +180,10 @@ inline BENCHMARK_ALWAYS_INLINE int64_t N
   return cycles;
 #endif
 #else
-// The soft failover to a generic implementation is automatic only for ARM.
-// For other platforms the developer is expected to make an attempt to create
-// a fast implementation and use generic version if nothing better is available.
-#error You need to define CycleTimer for your OS and CPU
+  // Generic implementation to make ports to new arches (Hello RISC-V!!!) happy
+  struct timespec ts = { 0, 0 };
+  clock_gettime(CLOCK_MONOTONIC, &ts);
+  return static_cast<int64_t>(ts.tv_sec) * 1000000000 + ts.tv_nsec;
 #endif
 }
 }  // end namespace cycleclock
