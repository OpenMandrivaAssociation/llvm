diff -up llvm-project-master/clang/lib/Driver/ToolChains/Gnu.cpp.27~ llvm-project-master/clang/lib/Driver/ToolChains/Gnu.cpp
--- llvm-project-master/clang/lib/Driver/ToolChains/Gnu.cpp.27~	2020-06-21 19:59:50.543323339 +0200
+++ llvm-project-master/clang/lib/Driver/ToolChains/Gnu.cpp	2020-06-21 20:01:07.343907837 +0200
@@ -2141,7 +2141,11 @@ void Generic_GCC::GCCInstallationDetecto
                                                "riscv64-linux-gnu",
                                                "riscv64-unknown-elf",
                                                "riscv64-redhat-linux",
-                                               "riscv64-suse-linux"};
+                                               "riscv64-suse-linux",
+                                               "riscv64-openmandriva-linux",
+                                               "riscv64-openmandriva-linux-gnu",
+                                               "riscv64-openmandriva-linux-musl",
+                                               "riscv64-openmandriva-linux-uclibc"};
 
   static const char *const SPARCv8LibDirs[] = {"/lib32", "/lib"};
   static const char *const SPARCv8Triples[] = {"sparc-linux-gnu",
diff -up llvm-project-master/clang-tools-extra/clangd/CMakeLists.txt.27~ llvm-project-master/clang-tools-extra/clangd/CMakeLists.txt
diff -up llvm-project-master/llvm/tools/dsymutil/CMakeLists.txt.27~ llvm-project-master/llvm/tools/dsymutil/CMakeLists.txt
diff -up llvm-project-master/llvm/utils/benchmark/src/cycleclock.h.27~ llvm-project-master/llvm/utils/benchmark/src/cycleclock.h
--- llvm-project-master/llvm/utils/benchmark/src/cycleclock.h.27~	2020-06-21 19:00:42.000000000 +0200
+++ llvm-project-master/llvm/utils/benchmark/src/cycleclock.h	2020-06-21 19:59:50.543323339 +0200
@@ -194,10 +194,10 @@ inline BENCHMARK_ALWAYS_INLINE int64_t N
   return cycles;
 #endif
 #else
-// The soft failover to a generic implementation is automatic only for ARM.
-// For other platforms the developer is expected to make an attempt to create
-// a fast implementation and use generic version if nothing better is available.
-#error You need to define CycleTimer for your OS and CPU
+  // Generic implementation to make ports to new arches (Hello RISC-V!!!) happy
+  struct timespec ts = { 0, 0 };
+  clock_gettime(CLOCK_MONOTONIC, &ts);
+  return static_cast<int64_t>(ts.tv_sec) * 1000000000 + ts.tv_nsec;
 #endif
 }
 }  // end namespace cycleclock
