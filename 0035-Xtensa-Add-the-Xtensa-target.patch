diff -up llvm-project-release-17.x/clang/include/clang/Basic/TargetInfo.h.75~ llvm-project-release-17.x/clang/include/clang/Basic/TargetInfo.h
--- llvm-project-release-17.x/clang/include/clang/Basic/TargetInfo.h.75~	2023-07-28 09:10:13.000000000 +0200
+++ llvm-project-release-17.x/clang/include/clang/Basic/TargetInfo.h	2023-07-28 13:29:22.193041068 +0200
@@ -337,7 +337,10 @@ public:
     //    void *__saved_reg_area_end_pointer;
     //    void *__overflow_area_pointer;
     //} va_list;
-    HexagonBuiltinVaList
+    HexagonBuiltinVaList,
+
+    // Tensilica Xtensa
+    XtensaABIBuiltinVaList
   };
 
 protected:
diff -up llvm-project-release-17.x/clang/lib/AST/ASTContext.cpp.75~ llvm-project-release-17.x/clang/lib/AST/ASTContext.cpp
--- llvm-project-release-17.x/clang/lib/AST/ASTContext.cpp.75~	2023-07-28 09:10:13.000000000 +0200
+++ llvm-project-release-17.x/clang/lib/AST/ASTContext.cpp	2023-07-28 13:29:22.195041084 +0200
@@ -9115,6 +9115,51 @@ static TypedefDecl *CreateHexagonBuiltin
   return Context->buildImplicitTypedef(VaListTagArrayType, "__builtin_va_list");
 }
 
+static TypedefDecl *
+CreateXtensaABIBuiltinVaListDecl(const ASTContext *Context) {
+  // typedef struct __va_list_tag {
+  RecordDecl *VaListTagDecl;
+
+  VaListTagDecl = Context->buildImplicitRecord("__va_list_tag");
+  VaListTagDecl->startDefinition();
+
+  const size_t NumFields = 3;
+  QualType FieldTypes[NumFields];
+  const char *FieldNames[NumFields];
+
+  // int* __va_stk;
+  FieldTypes[0] = Context->getPointerType(Context->IntTy);
+  FieldNames[0] = "__va_stk";
+
+  // int* __va_reg;
+  FieldTypes[1] = Context->getPointerType(Context->IntTy);
+  FieldNames[1] = "__va_reg";
+
+  // int __va_ndx;
+  FieldTypes[2] = Context->IntTy;
+  FieldNames[2] = "__va_ndx";
+
+  // Create fields
+  for (unsigned i = 0; i < NumFields; ++i) {
+    FieldDecl *Field = FieldDecl::Create(
+        *Context, VaListTagDecl, SourceLocation(), SourceLocation(),
+        &Context->Idents.get(FieldNames[i]), FieldTypes[i], /*TInfo=*/nullptr,
+        /*BitWidth=*/nullptr,
+        /*Mutable=*/false, ICIS_NoInit);
+    Field->setAccess(AS_public);
+    VaListTagDecl->addDecl(Field);
+  }
+  VaListTagDecl->completeDefinition();
+  Context->VaListTagDecl = VaListTagDecl;
+  QualType VaListTagType = Context->getRecordType(VaListTagDecl);
+
+  // } __va_list_tag;
+  TypedefDecl *VaListTagTypedefDecl =
+      Context->buildImplicitTypedef(VaListTagType, "__builtin_va_list");
+
+  return VaListTagTypedefDecl;
+}
+
 static TypedefDecl *CreateVaListDecl(const ASTContext *Context,
                                      TargetInfo::BuiltinVaListKind Kind) {
   switch (Kind) {
@@ -9136,6 +9181,8 @@ static TypedefDecl *CreateVaListDecl(con
     return CreateSystemZBuiltinVaListDecl(Context);
   case TargetInfo::HexagonBuiltinVaList:
     return CreateHexagonBuiltinVaListDecl(Context);
+  case TargetInfo::XtensaABIBuiltinVaList:
+    return CreateXtensaABIBuiltinVaListDecl(Context);
   }
 
   llvm_unreachable("Unhandled __builtin_va_list type kind");
diff -up llvm-project-release-17.x/clang/lib/Basic/CMakeLists.txt.75~ llvm-project-release-17.x/clang/lib/Basic/CMakeLists.txt
--- llvm-project-release-17.x/clang/lib/Basic/CMakeLists.txt.75~	2023-07-28 09:10:13.000000000 +0200
+++ llvm-project-release-17.x/clang/lib/Basic/CMakeLists.txt	2023-07-28 13:29:22.195041084 +0200
@@ -115,6 +115,7 @@ add_clang_library(clangBasic
   Targets/WebAssembly.cpp
   Targets/X86.cpp
   Targets/XCore.cpp
+  Targets/Xtensa.cpp
   TokenKinds.cpp
   TypeTraits.cpp
   Version.cpp
diff -up llvm-project-release-17.x/clang/lib/Basic/Targets/Xtensa.cpp.75~ llvm-project-release-17.x/clang/lib/Basic/Targets/Xtensa.cpp
--- llvm-project-release-17.x/clang/lib/Basic/Targets/Xtensa.cpp.75~	2023-07-28 13:29:22.195041084 +0200
+++ llvm-project-release-17.x/clang/lib/Basic/Targets/Xtensa.cpp	2023-07-28 13:29:22.195041084 +0200
@@ -0,0 +1,29 @@
+//===--- Xtensa.cpp - Implement Xtensa target feature support -------------===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+//
+// This file implements Xtensa TargetInfo objects.
+//
+//===----------------------------------------------------------------------===//
+
+#include "Xtensa.h"
+#include "clang/Basic/Builtins.h"
+#include "clang/Basic/MacroBuilder.h"
+#include "clang/Basic/TargetBuiltins.h"
+
+using namespace clang;
+using namespace clang::targets;
+
+void XtensaTargetInfo::getTargetDefines(const LangOptions &Opts,
+                                        MacroBuilder &Builder) const {
+  Builder.defineMacro("__Xtensa__");
+  Builder.defineMacro("__xtensa__");
+  Builder.defineMacro("__XTENSA__");
+  Builder.defineMacro("__XTENSA_EL__");
+}
diff -up llvm-project-release-17.x/clang/lib/Basic/Targets/Xtensa.h.75~ llvm-project-release-17.x/clang/lib/Basic/Targets/Xtensa.h
--- llvm-project-release-17.x/clang/lib/Basic/Targets/Xtensa.h.75~	2023-07-28 13:29:22.196041092 +0200
+++ llvm-project-release-17.x/clang/lib/Basic/Targets/Xtensa.h	2023-07-28 13:29:22.196041092 +0200
@@ -0,0 +1,106 @@
+//===--- Xtensa.h - Declare Xtensa target feature support -------*- C++ -*-===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+//
+// This file declares Xtensa TargetInfo objects.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_CLANG_LIB_BASIC_TARGETS_XTENSA_H
+#define LLVM_CLANG_LIB_BASIC_TARGETS_XTENSA_H
+
+#include "clang/Basic/TargetInfo.h"
+#include "clang/Basic/TargetOptions.h"
+#include "llvm/ADT/StringSwitch.h"
+#include "llvm/ADT/Triple.h"
+#include "llvm/Support/Compiler.h"
+
+#include "clang/Basic/Builtins.h"
+#include "clang/Basic/MacroBuilder.h"
+#include "clang/Basic/TargetBuiltins.h"
+
+namespace clang {
+namespace targets {
+
+class LLVM_LIBRARY_VISIBILITY XtensaTargetInfo : public TargetInfo {
+  static const Builtin::Info BuiltinInfo[];
+  std::string CPU;
+
+public:
+  XtensaTargetInfo(const llvm::Triple &Triple, const TargetOptions &)
+      : TargetInfo(Triple) {
+    BigEndian = false;
+    NoAsmVariants = true;
+    LongLongAlign = 64;
+    SuitableAlign = 32;
+    DoubleAlign = LongDoubleAlign = 64;
+    SizeType = UnsignedInt;
+    PtrDiffType = SignedInt;
+    IntPtrType = SignedInt;
+    WCharType = UnsignedChar;
+    WIntType = UnsignedInt;
+    UseZeroLengthBitfieldAlignment = true;
+    MaxAtomicPromoteWidth = MaxAtomicInlineWidth = 32;
+    resetDataLayout("e-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-n32");
+  }
+
+  void getTargetDefines(const LangOptions &Opts,
+                        MacroBuilder &Builder) const override;
+
+  ArrayRef<Builtin::Info> getTargetBuiltins() const override { return None; }
+
+  BuiltinVaListKind getBuiltinVaListKind() const override {
+
+    return TargetInfo::XtensaABIBuiltinVaList;
+  }
+
+  const char *getClobbers() const override { return ""; }
+
+  ArrayRef<const char *> getGCCRegNames() const override {
+    static const char *const GCCRegNames[] = {
+        // General register name
+        "a0", "sp", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a10",
+        "a11", "a12", "a13", "a14", "a15",
+        // Special register name
+        "sar"};
+    return llvm::makeArrayRef(GCCRegNames);
+  }
+
+  ArrayRef<TargetInfo::GCCRegAlias> getGCCRegAliases() const override {
+    return None;
+  }
+
+  bool validateAsmConstraint(const char *&Name,
+                             TargetInfo::ConstraintInfo &Info) const override {
+    switch (*Name) {
+    default:
+      return false;
+    case 'a':
+      Info.setAllowsRegister();
+      return true;
+    }
+    return false;
+  }
+
+  int getEHDataRegisterNumber(unsigned RegNo) const override {
+    return (RegNo < 2) ? RegNo : -1;
+  }
+
+  bool isValidCPUName(StringRef Name) const override {
+    return llvm::StringSwitch<bool>(Name).Case("generic", true).Default(false);
+  }
+
+  bool setCPU(const std::string &Name) override {
+    CPU = Name;
+    return isValidCPUName(Name);
+  }
+};
+} // namespace targets
+} // namespace clang
+#endif // LLVM_CLANG_LIB_BASIC_TARGETS_XTENSA_H
diff -up llvm-project-release-17.x/clang/lib/Driver/ToolChains/CommonArgs.cpp.75~ llvm-project-release-17.x/clang/lib/Driver/ToolChains/CommonArgs.cpp
--- llvm-project-release-17.x/clang/lib/Driver/ToolChains/CommonArgs.cpp.75~	2023-07-28 09:10:13.000000000 +0200
+++ llvm-project-release-17.x/clang/lib/Driver/ToolChains/CommonArgs.cpp	2023-07-28 13:29:22.196041092 +0200
@@ -474,6 +474,11 @@ std::string tools::getCPUName(const Driv
   case llvm::Triple::wasm32:
   case llvm::Triple::wasm64:
     return std::string(getWebAssemblyTargetCPU(Args));
+
+  case llvm::Triple::xtensa:
+    if (const Arg *A = Args.getLastArg(options::OPT_mcpu_EQ))
+      return A->getValue();
+    return "";
   }
 }
 
diff -up llvm-project-release-17.x/clang/lib/Driver/ToolChains/Gnu.cpp.75~ llvm-project-release-17.x/clang/lib/Driver/ToolChains/Gnu.cpp
--- llvm-project-release-17.x/clang/lib/Driver/ToolChains/Gnu.cpp.75~	2023-07-28 13:29:19.309017898 +0200
+++ llvm-project-release-17.x/clang/lib/Driver/ToolChains/Gnu.cpp	2023-07-28 13:29:22.196041092 +0200
@@ -2435,6 +2435,8 @@ void Generic_GCC::GCCInstallationDetecto
       "s390x-linux-gnu", "s390x-unknown-linux-gnu", "s390x-ibm-linux-gnu",
       "s390x-suse-linux", "s390x-redhat-linux"};
 
+  static const char *const XtensaLibDirs[] = {"/lib"};
+  static const char *const XtensaTriples[] = {"xtensa-unknown-elf"};
 
   using std::begin;
   using std::end;
@@ -2688,6 +2690,10 @@ void Generic_GCC::GCCInstallationDetecto
     LibDirs.append(begin(SystemZLibDirs), end(SystemZLibDirs));
     TripleAliases.append(begin(SystemZTriples), end(SystemZTriples));
     break;
+  case llvm::Triple::xtensa:
+    LibDirs.append(begin(XtensaLibDirs), end(XtensaLibDirs));
+    TripleAliases.append(begin(XtensaTriples), end(XtensaTriples));
+    break;
   default:
     // By default, just rely on the standard lib directories and the original
     // triple.
