diff -up llvm-9.0.0-20190625/clang/lib/Headers/emmintrin.h.omv~ llvm-9.0.0-20190625/clang/lib/Headers/emmintrin.h
--- llvm-9.0.0-20190625/clang/lib/Headers/emmintrin.h.omv~	2019-06-27 18:25:19.940902825 +0200
+++ llvm-9.0.0-20190625/clang/lib/Headers/emmintrin.h	2019-06-27 18:39:48.025860709 +0200
@@ -2302,11 +2302,13 @@ _mm_adds_epu16(__m128i __a, __m128i __b)
 ///    A 128-bit unsigned [16 x i8] vector.
 /// \returns A 128-bit unsigned [16 x i8] vector containing the rounded
 ///    averages of both parameters.
+#if __has_builtin(__builtin_ia32_pavgb128)
 static __inline__ __m128i __DEFAULT_FN_ATTRS
 _mm_avg_epu8(__m128i __a, __m128i __b)
 {
   return (__m128i)__builtin_ia32_pavgb128((__v16qi)__a, (__v16qi)__b);
 }
+#endif
 
 /// Computes the rounded avarages of corresponding elements of two
 ///    128-bit unsigned [8 x i16] vectors, saving each result in the
@@ -2322,11 +2324,13 @@ _mm_avg_epu8(__m128i __a, __m128i __b)
 ///    A 128-bit unsigned [8 x i16] vector.
 /// \returns A 128-bit unsigned [8 x i16] vector containing the rounded
 ///    averages of both parameters.
+#if __has_builtin(__builtin_ia32_pavgw128)
 static __inline__ __m128i __DEFAULT_FN_ATTRS
 _mm_avg_epu16(__m128i __a, __m128i __b)
 {
   return (__m128i)__builtin_ia32_pavgw128((__v8hi)__a, (__v8hi)__b);
 }
+#endif
 
 /// Multiplies the corresponding elements of two 128-bit signed [8 x i16]
 ///    vectors, producing eight intermediate 32-bit signed integer products, and
