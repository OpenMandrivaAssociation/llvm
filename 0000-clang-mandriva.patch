--- clang/include/clang/Driver/Distro.h.mandriva~	2017-12-08 22:31:54.434381617 +0100
+++ clang/include/clang/Driver/Distro.h	2017-12-08 22:33:57.650714858 +0100
@@ -61,6 +61,9 @@ public:
     UbuntuZesty,
     UbuntuArtful,
     UbuntuBionic,
+    Mandriva,
+    OpenMandriva,
+    ROSA,
     UnknownDistro
   };
 
@@ -117,6 +120,10 @@ public:
     return DistroVal >= UbuntuHardy && DistroVal <= UbuntuBionic;
   }
 
+  bool IsMandriva() const {
+    return DistroVal >= Mandriva && DistroVal <= ROSA;
+  }
+
   bool IsAlpineLinux() const {
     return DistroVal == AlpineLinux;
   }
--- clang/lib/Driver/Distro.cpp.mandriva~	2017-11-19 01:08:12.000000000 +0100
+++ clang/lib/Driver/Distro.cpp	2017-12-08 22:35:01.913827761 +0100
@@ -25,7 +25,7 @@ static Distro::DistroType DetectDistro(v
     SmallVector<StringRef, 16> Lines;
     Data.split(Lines, "\n");
 	Distro::DistroType Version = Distro::UnknownDistro;
-    for (StringRef Line : Lines)
+    for (StringRef Line : Lines) {
       if (Version == Distro::UnknownDistro && Line.startswith("DISTRIB_CODENAME="))
         Version = llvm::StringSwitch<Distro::DistroType>(Line.substr(17))
                       .Case("hardy", Distro::UbuntuHardy)
@@ -50,10 +50,27 @@ static Distro::DistroType DetectDistro(v
                       .Case("artful", Distro::UbuntuArtful)
                       .Case("bionic", Distro::UbuntuBionic)
                       .Default(Distro::UnknownDistro);
+      if (Version == Distro::UnknownDistro && Line.startswith("DISTRIB_ID=MandrivaLinux"))
+        // It's either Mandriva or a close derivate, will get details
+        // from DISTRIB_DESCRIPTION
+        Version = Distro::Mandriva;
+      if (Version == Distro::Mandriva && Line.startswith("DISTRIB_DESCRIPTION=")) {
+        if(Line.substr(20).find("Open") != StringRef::npos)
+          Version = Distro::OpenMandriva;
+        else if(Line.substr(20).find("ROSA") != StringRef::npos)
+          Version = Distro::ROSA;
+      }
+    }
     if (Version != Distro::UnknownDistro)
       return Version;
   }
 
+  // This must be checked before redhat-release because OpenMandriva
+  // provides a redhat-release file to give some hints to configure
+  // scripts not supporting OpenMandriva directly
+  if (VFS.exists("/etc/openmandriva-release"))
+    return Distro::OpenMandriva;
+
   File = VFS.getBufferForFile("/etc/redhat-release");
   if (File) {
     StringRef Data = File.get()->getBuffer();
--- clang/lib/Driver/ToolChains/Gnu.cpp.mandriva~	2017-11-29 17:42:44.000000000 +0100
+++ clang/lib/Driver/ToolChains/Gnu.cpp	2017-12-08 22:31:54.434381617 +0100
@@ -1709,7 +1709,9 @@ bool Generic_GCC::GCCInstallationDetecto
   static const char *const AArch64LibDirs[] = {"/lib64", "/lib"};
   static const char *const AArch64Triples[] = {
       "aarch64-none-linux-gnu", "aarch64-linux-gnu", "aarch64-linux-android",
-      "aarch64-redhat-linux", "aarch64-suse-linux"};
+      "aarch64-redhat-linux", "aarch64-suse-linux", "aarch64-mandriva-linux-gnu",
+      "aarch64-openmandriva-linux-gnu", "aarch64-mandriva-linux-musl",
+      "aarch64-openmandriva-linux-musl" };
   static const char *const AArch64beLibDirs[] = {"/lib"};
   static const char *const AArch64beTriples[] = {"aarch64_be-none-linux-gnu",
                                                  "aarch64_be-linux-gnu"};
@@ -1720,7 +1722,24 @@ bool Generic_GCC::GCCInstallationDetecto
   static const char *const ARMHFTriples[] = {"arm-linux-gnueabihf",
                                              "armv7hl-redhat-linux-gnueabi",
                                              "armv6hl-suse-linux-gnueabi",
-                                             "armv7hl-suse-linux-gnueabi"};
+                                             "armv7hl-suse-linux-gnueabi",
+					     "arm-mandriva-linux-gnueabihf",
+					     "armv7-mandriva-linux-gnueabihf",
+					     "armv7hl-mandriva-linux-gnueabihf",
+					     "armv7hnl-mandriva-linux-gnueabihf",
+					     "arm-mandriva-linux-musleabihf",
+					     "armv7-mandriva-linux-musleabihf",
+					     "armv7hl-mandriva-linux-musleabihf",
+					     "armv7hnl-mandriva-linux-musleabihf",
+					     "arm-openmandriva-linux-gnueabihf",
+					     "armv7-openmandriva-linux-gnueabihf",
+					     "armv7hl-openmandriva-linux-gnueabihf",
+					     "armv7hnl-openmandriva-linux-gnueabihf",
+					     "arm-openmandriva-linux-musleabihf",
+					     "armv7-openmandriva-linux-musleabihf",
+					     "armv7hl-openmandriva-linux-musleabihf",
+					     "armv7hnl-openmandriva-linux-musleabihf",
+  };
   static const char *const ARMebLibDirs[] = {"/lib"};
   static const char *const ARMebTriples[] = {"armeb-linux-gnueabi",
                                              "armeb-linux-androideabi"};
@@ -1734,7 +1753,12 @@ bool Generic_GCC::GCCInstallationDetecto
       "x86_64-redhat-linux",    "x86_64-suse-linux",
       "x86_64-manbo-linux-gnu", "x86_64-linux-gnu",
       "x86_64-slackware-linux", "x86_64-linux-android",
-      "x86_64-unknown-linux"};
+      "x86_64-unknown-linux",   "x86_64-mandriva-linux-gnu",
+      "x86_64-mandriva-linux-musl", "x86_64-openmandriva-linux-gnu",
+      "x86_64-openmandriva-linux-musl", "x86_64-mandriva-linux-gnux32",
+      "x86_64-openmandriva-linux-gnux32", "x86_64-mandriva-linux-muslx32",
+      "x86_64-openmandriva-linux-muslx32"
+  };
   static const char *const X32LibDirs[] = {"/libx32"};
   static const char *const X86LibDirs[] = {"/lib32", "/lib"};
   static const char *const X86Triples[] = {
@@ -1742,7 +1766,11 @@ bool Generic_GCC::GCCInstallationDetecto
       "i386-linux-gnu",       "i386-redhat-linux6E",   "i686-redhat-linux",
       "i586-redhat-linux",    "i386-redhat-linux",     "i586-suse-linux",
       "i486-slackware-linux", "i686-montavista-linux", "i686-linux-android",
-      "i586-linux-gnu"};
+      "i586-linux-gnu",       "i586-mandriva-linux-gnu", "i586-openmandriva-linux-gnu",
+      "i586-mandriva-linux-musl", "i586-openmandriva-linux-musl",
+      "i686-mandriva-linux-gnu",  "i686-openmandriva-linux-gnu",
+      "i686-mandriva-linux-musl", "i686-openmandriva-linux-musl",
+  };
 
   static const char *const MIPSLibDirs[] = {"/lib"};
   static const char *const MIPSTriples[] = {"mips-linux-gnu", "mips-mti-linux",
--- clang/lib/Driver/ToolChains/Linux.cpp.mandriva~	2017-11-20 22:46:29.000000000 +0100
+++ clang/lib/Driver/ToolChains/Linux.cpp	2017-12-08 22:36:06.761949477 +0100
@@ -140,7 +140,7 @@ static std::string getMultiarchTriple(co
   return TargetTriple.str();
 }
 
-static StringRef getOSLibDir(const llvm::Triple &Triple, const ArgList &Args) {
+static StringRef getOSLibDir(const Distro &distro, const llvm::Triple &Triple, const ArgList &Args) {
   if (tools::isMipsArch(Triple.getArch())) {
     if (Triple.isAndroid()) {
       StringRef CPUName;
@@ -168,12 +168,17 @@ static StringRef getOSLibDir(const llvm:
   // FIXME: This is a bit of a hack. We should really unify this code for
   // reasoning about oslibdir spellings with the lib dir spellings in the
   // GCCInstallationDetector, but that is a more significant refactoring.
-  if (Triple.getArch() == llvm::Triple::x86 ||
-      Triple.getArch() == llvm::Triple::ppc)
+  //
+  // lib32 is distro specific -- we don't do it on OpenMandriva, where 64bit
+  // goes to lib64 and 32bit goes to lib
+  if (!distro.IsMandriva() &&
+      (Triple.getArch() == llvm::Triple::x86 ||
+       Triple.getArch() == llvm::Triple::ppc))
     return "lib32";
 
   if (Triple.getArch() == llvm::Triple::x86_64 &&
-      Triple.getEnvironment() == llvm::Triple::GNUX32)
+      (Triple.getEnvironment() == llvm::Triple::GNUX32 ||
+       Triple.getEnvironment() == llvm::Triple::MuslX32))
     return "libx32";
 
   return Triple.isArch32Bit() ? "lib" : "lib64";
@@ -215,7 +220,7 @@ Linux::Linux(const Driver &D, const llvm
     ExtraOpts.push_back("now");
   }
 
-  if (Distro.IsOpenSUSE() || Distro.IsUbuntu() || Distro.IsAlpineLinux()) {
+  if (Distro.IsOpenSUSE() || Distro.IsUbuntu() || Distro.IsAlpineLinux() || Distro.IsMandriva()) {
     ExtraOpts.push_back("-z");
     ExtraOpts.push_back("relro");
   }
@@ -237,7 +242,7 @@ Linux::Linux(const Driver &D, const llvm
   // Android loader does not support .gnu.hash.
   // Hexagon linker/loader does not support .gnu.hash
   if (!IsMips && !IsAndroid && !IsHexagon) {
-    if (Distro.IsRedhat() || Distro.IsOpenSUSE() || Distro.IsAlpineLinux() ||
+    if (Distro.IsRedhat() || Distro.IsOpenSUSE() || Distro.IsAlpineLinux() || Distro.IsMandriva() ||
         (Distro.IsUbuntu() && Distro >= Distro::UbuntuMaverick))
       ExtraOpts.push_back("--hash-style=gnu");
 
@@ -253,7 +258,7 @@ Linux::Linux(const Driver &D, const llvm
   ExtraOpts.push_back("--build-id");
 #endif
 
-  if (IsAndroid || Distro.IsOpenSUSE())
+  if (IsAndroid || Distro.IsOpenSUSE() || Distro.IsMandriva())
     ExtraOpts.push_back("--enable-new-dtags");
 
   // The selection of paths to try here is designed to match the patterns which
@@ -263,7 +268,7 @@ Linux::Linux(const Driver &D, const llvm
   // to the link paths.
   path_list &Paths = getFilePaths();
 
-  const std::string OSLibDir = getOSLibDir(Triple, Args);
+  const std::string OSLibDir = getOSLibDir(Distro, Triple, Args);
   const std::string MultiarchTriple = getMultiarchTriple(D, Triple, SysRoot);
 
   // Add the multilib suffixed paths where they are available.
