diff -up llvm-project-release-13.x/clang/include/clang/Driver/Distro.h.1~ llvm-project-release-13.x/clang/include/clang/Driver/Distro.h
--- llvm-project-release-13.x/clang/include/clang/Driver/Distro.h.1~	2021-08-02 20:31:08.000000000 +0200
+++ llvm-project-release-13.x/clang/include/clang/Driver/Distro.h	2021-08-02 22:07:17.527816309 +0200
@@ -72,6 +72,8 @@ public:
     UbuntuGroovy,
     UbuntuHirsute,
     UbuntuImpish,
+    OpenMandriva,
+    ROSA,
     UnknownDistro
   };
 
@@ -130,6 +132,8 @@ public:
 
   bool IsGentoo() const { return DistroVal == Gentoo; }
 
+  bool IsOpenMandriva() const { return DistroVal == OpenMandriva || DistroVal == ROSA; }
+
   /// @}
 };
 
diff -up llvm-project-release-13.x/clang/lib/Driver/Distro.cpp.1~ llvm-project-release-13.x/clang/lib/Driver/Distro.cpp
--- llvm-project-release-13.x/clang/lib/Driver/Distro.cpp.1~	2021-08-02 20:31:08.000000000 +0200
+++ llvm-project-release-13.x/clang/lib/Driver/Distro.cpp	2021-08-02 22:07:43.442000846 +0200
@@ -33,7 +33,7 @@ static Distro::DistroType DetectOsReleas
   Distro::DistroType Version = Distro::UnknownDistro;
 
   // Obviously this can be improved a lot.
-  for (StringRef Line : Lines)
+  for (StringRef Line : Lines) {
     if (Version == Distro::UnknownDistro && Line.startswith("ID="))
       Version = llvm::StringSwitch<Distro::DistroType>(Line.substr(3))
                     .Case("alpine", Distro::AlpineLinux)
@@ -45,6 +45,15 @@ static Distro::DistroType DetectOsReleas
                     .Case("opensuse", Distro::OpenSUSE)
                     .Case("exherbo", Distro::Exherbo)
                     .Default(Distro::UnknownDistro);
+    else if (Version == Distro::UnknownDistro && Line.startswith("DISTRIB_ID=MandrivaLinux"))
+      // It's one of the Mandriva successors -- will get details
+      // from DISTRIB_DESCRIPTION
+      Version = Distro::OpenMandriva;
+    else if (Version == Distro::OpenMandriva && Line.startswith("DISTRIB_DESCRIPTION=")) {
+      if (Line.substr(20).find("ROSA") != StringRef::npos)
+        Version = Distro::ROSA;
+    }
+  }
   return Version;
 }
 
diff -up llvm-project-release-13.x/clang/lib/Driver/ToolChains/Gnu.cpp.1~ llvm-project-release-13.x/clang/lib/Driver/ToolChains/Gnu.cpp
--- llvm-project-release-13.x/clang/lib/Driver/ToolChains/Gnu.cpp.1~	2021-08-02 20:31:08.000000000 +0200
+++ llvm-project-release-13.x/clang/lib/Driver/ToolChains/Gnu.cpp	2021-08-02 22:09:46.428869367 +0200
@@ -2077,7 +2077,10 @@ void Generic_GCC::GCCInstallationDetecto
   static const char *const AArch64LibDirs[] = {"/lib64", "/lib"};
   static const char *const AArch64Triples[] = {
       "aarch64-none-linux-gnu", "aarch64-linux-gnu", "aarch64-redhat-linux",
-      "aarch64-suse-linux", "aarch64-linux-android"};
+      "aarch64-suse-linux", "aarch64-linux-android", "aarch64-mandriva-linux-gnu",
+      "aarch64-openmandriva-linux-gnu", "aarch64-openmandriva-linux-musl"
+      "aarch64-rosa-linux-gnu", "aarch64-rosa-linux-musl"
+  };
   static const char *const AArch64beLibDirs[] = {"/lib"};
   static const char *const AArch64beTriples[] = {"aarch64_be-none-linux-gnu",
                                                  "aarch64_be-linux-gnu"};
@@ -2088,7 +2091,40 @@ void Generic_GCC::GCCInstallationDetecto
   static const char *const ARMHFTriples[] = {"arm-linux-gnueabihf",
                                              "armv7hl-redhat-linux-gnueabi",
                                              "armv6hl-suse-linux-gnueabi",
-                                             "armv7hl-suse-linux-gnueabi"};
+                                             "armv7hl-suse-linux-gnueabi"
+                                             "arm-mandriva-linux-gnueabihf",
+                                             "armv7l-mandriva-linux-gnueabihf",
+                                             "armv7hl-mandriva-linux-gnueabihf",
+                                             "armv7hnl-mandriva-linux-gnueabihf",
+                                             "armv8l-mandriva-linux-gnueabihf",
+                                             "armv8hl-mandriva-linux-gnueabihf",
+                                             "armv8hnl-mandriva-linux-gnueabihf",
+                                             "armv8hcnl-mandriva-linux-gnueabihf",
+                                             "arm-mandriva-linux-musleabihf",
+                                             "armv7l-mandriva-linux-musleabihf",
+                                             "armv7hl-mandriva-linux-musleabihf",
+                                             "armv7hnl-mandriva-linux-musleabihf",
+                                             "armv8l-mandriva-linux-musleabihf",
+                                             "armv8hl-mandriva-linux-musleabihf",
+                                             "armv8hnl-mandriva-linux-musleabihf",
+                                             "armv8hcnl-mandriva-linux-musleabihf",
+                                             "arm-openmandriva-linux-gnueabihf",
+                                             "armv7l-openmandriva-linux-gnueabihf",
+                                             "armv7hl-openmandriva-linux-gnueabihf",
+                                             "armv7hnl-openmandriva-linux-gnueabihf",
+                                             "armv8l-openmandriva-linux-gnueabihf",
+                                             "armv8hl-openmandriva-linux-gnueabihf",
+                                             "armv8hnl-openmandriva-linux-gnueabihf",
+                                             "armv8hcnl-openmandriva-linux-gnueabihf",
+                                             "arm-openmandriva-linux-musleabihf",
+                                             "armv7l-openmandriva-linux-musleabihf",
+                                             "armv7hl-openmandriva-linux-musleabihf",
+                                             "armv7hnl-openmandriva-linux-musleabihf",
+                                             "armv8l-openmandriva-linux-musleabihf",
+                                             "armv8hl-openmandriva-linux-musleabihf",
+                                             "armv8hnl-openmandriva-linux-musleabihf",
+                                             "armv8hcnl-openmandriva-linux-musleabihf",
+  };
   static const char *const ARMebLibDirs[] = {"/lib"};
   static const char *const ARMebTriples[] = {"armeb-linux-gnueabi",
                                              "armeb-linux-androideabi"};
@@ -2105,7 +2141,11 @@ void Generic_GCC::GCCInstallationDetecto
       "x86_64-redhat-linux",    "x86_64-suse-linux",
       "x86_64-manbo-linux-gnu", "x86_64-linux-gnu",
       "x86_64-slackware-linux", "x86_64-unknown-linux",
-      "x86_64-amazon-linux",    "x86_64-linux-android"};
+      "x86_64-amazon-linux",    "x86_64-linux-android",
+      "x86_64-openmandriva-linux-gnu", "x86_64-openmandriva-linux-musl",
+      "x86_64-openmandriva-linux-gnux32", "x86_64-openmandriva-linux-muslx32",
+      "x86_64-openmandriva-linux-uclibc"
+  };
   static const char *const X32Triples[] = {"x86_64-linux-gnux32",
                                            "x86_64-pc-linux-gnux32"};
   static const char *const X32LibDirs[] = {"/libx32", "/lib"};
@@ -2116,6 +2156,8 @@ void Generic_GCC::GCCInstallationDetecto
       "i686-redhat-linux",  "i386-redhat-linux",
       "i586-suse-linux",    "i686-montavista-linux",
       "i686-linux-android", "i686-gnu",
+      "i586-openmandriva-linux-gnu", "i586-openmandriva-linux-musl", "i586-openmandriva-linux-uclibc",
+      "i686-openmandriva-linux-gnu", "i686-openmandriva-linux-musl", "i686-openmandriva-linux-uclibc",
   };
 
   static const char *const M68kLibDirs[] = {"/lib"};
diff -up llvm-project-release-13.x/clang/lib/Driver/ToolChains/Linux.cpp.1~ llvm-project-release-13.x/clang/lib/Driver/ToolChains/Linux.cpp
--- llvm-project-release-13.x/clang/lib/Driver/ToolChains/Linux.cpp.1~	2021-08-02 20:31:08.000000000 +0200
+++ llvm-project-release-13.x/clang/lib/Driver/ToolChains/Linux.cpp	2021-08-02 22:13:36.239467096 +0200
@@ -134,7 +134,7 @@ std::string Linux::getMultiarchTriple(co
   return TargetTriple.str();
 }
 
-static StringRef getOSLibDir(const llvm::Triple &Triple, const ArgList &Args) {
+static StringRef getOSLibDir(const Distro &distro, const llvm::Triple &Triple, const ArgList &Args) {
   if (Triple.isMIPS()) {
     if (Triple.isAndroid()) {
       StringRef CPUName;
@@ -162,14 +162,15 @@ static StringRef getOSLibDir(const llvm:
   // FIXME: This is a bit of a hack. We should really unify this code for
   // reasoning about oslibdir spellings with the lib dir spellings in the
   // GCCInstallationDetector, but that is a more significant refactoring.
-  if (Triple.getArch() == llvm::Triple::x86 || Triple.isPPC32() ||
-      Triple.getArch() == llvm::Triple::sparc)
+  if (!distro.IsOpenMandriva() &&
+      (Triple.getArch() == llvm::Triple::x86 || Triple.isPPC32() ||
+       Triple.getArch() == llvm::Triple::sparc))
     return "lib32";
 
   if (Triple.getArch() == llvm::Triple::x86_64 && Triple.isX32())
     return "libx32";
 
-  if (Triple.getArch() == llvm::Triple::riscv32)
+  if (!distro.IsOpenMandriva() && Triple.getArch() == llvm::Triple::riscv32)
     return "lib32";
 
   return Triple.isArch32Bit() ? "lib" : "lib64";
@@ -194,7 +195,7 @@ Linux::Linux(const Driver &D, const llvm
   }
 
   if (Distro.IsOpenSUSE() || Distro.IsUbuntu() || Distro.IsAlpineLinux() ||
-      Triple.isAndroid()) {
+      Distro.IsOpenMandriva() || Triple.isAndroid()) {
     ExtraOpts.push_back("-z");
     ExtraOpts.push_back("relro");
   }
@@ -234,6 +235,7 @@ Linux::Linux(const Driver &D, const llvm
   // Hexagon linker/loader does not support .gnu.hash
   if (!IsMips && !IsHexagon) {
     if (Distro.IsRedhat() || Distro.IsOpenSUSE() || Distro.IsAlpineLinux() ||
+        Distro.IsOpenMandriva() ||
         (Distro.IsUbuntu() && Distro >= Distro::UbuntuMaverick) ||
         (IsAndroid && !Triple.isAndroidVersionLT(23)))
       ExtraOpts.push_back("--hash-style=gnu");
@@ -249,7 +251,7 @@ Linux::Linux(const Driver &D, const llvm
   ExtraOpts.push_back("--build-id");
 #endif
 
-  if (IsAndroid || Distro.IsOpenSUSE())
+  if (IsAndroid || Distro.IsOpenSUSE() || Distro.IsOpenMandriva())
     ExtraOpts.push_back("--enable-new-dtags");
 
   // The selection of paths to try here is designed to match the patterns which
@@ -259,7 +261,7 @@ Linux::Linux(const Driver &D, const llvm
   // to the link paths.
   path_list &Paths = getFilePaths();
 
-  const std::string OSLibDir = std::string(getOSLibDir(Triple, Args));
+  const std::string OSLibDir = std::string(getOSLibDir(Distro, Triple, Args));
   const std::string MultiarchTriple = getMultiarchTriple(D, Triple, SysRoot);
 
   Generic_GCC::AddMultilibPaths(D, SysRoot, OSLibDir, MultiarchTriple, Paths);
