--- llvm-3.9.0.src/lib/Target/ARM/ARMSubtarget.cpp.64bitLongs~	2016-06-18 12:20:35.248030514 +0200
+++ llvm-3.9.0.src/lib/Target/ARM/ARMSubtarget.cpp	2016-06-18 12:23:42.501825569 +0200
@@ -161,6 +161,7 @@ void ARMSubtarget::initializeEnvironment
   UnsafeFPMath = false;
   HasV7Clrex = false;
   HasAcquireRelease = false;
+  UseLong64 = false;
 
   // MCAsmInfo isn't always present (e.g. in opt) so we can't initialize this
   // directly from it, but we can try to make sure they're consistent when both
--- llvm-3.9.0.src/lib/Target/ARM/ARMSubtarget.h.64bitLongs~	2016-06-03 16:03:27.000000000 +0200
+++ llvm-3.9.0.src/lib/Target/ARM/ARMSubtarget.h	2016-06-18 12:20:35.248030514 +0200
@@ -237,6 +237,9 @@ protected:
   /// Generate calls via indirect call instructions.
   bool GenLongCalls;
 
+  /// Force long to be a 64-bit type (RenderScript-specific)
+  bool UseLong64;
+
   /// Target machine allowed unsafe FP math (such as use of NEON fp)
   bool UnsafeFPMath;
 
--- llvm-3.9.0.src/lib/Target/ARM/ARM.td.64bitLongs~	2016-06-03 16:03:27.000000000 +0200
+++ llvm-3.9.0.src/lib/Target/ARM/ARM.td	2016-06-18 12:20:35.249030502 +0200
@@ -27,6 +27,11 @@ class Architecture<string fname, string
   : SubtargetFeature<fname, "ARMArch", aname,
                      !strconcat(aname, " architecture"), features>;
 
+// RenderScript-specific support for 64-bit long types on all targets
+def FeatureLong64 : SubtargetFeature<"long64", "UseLong64",
+                                     "true",
+                                     "long type is forced to be 64-bit">;
+
 //===----------------------------------------------------------------------===//
 // ARM Subtarget state.
 //
