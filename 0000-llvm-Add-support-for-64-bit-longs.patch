--- llvm-3.8.0.src/lib/Target/ARM/ARMSubtarget.cpp.64bitLongs~	2016-01-25 20:17:06.760685423 +0100
+++ llvm-3.8.0.src/lib/Target/ARM/ARMSubtarget.cpp	2016-01-25 20:18:09.038370287 +0100
@@ -154,6 +154,7 @@ void ARMSubtarget::initializeEnvironment
   UseNaClTrap = false;
   GenLongCalls = false;
   UnsafeFPMath = false;
+  UseLong64 = false;
 
   // MCAsmInfo isn't always present (e.g. in opt) so we can't initialize this
   // directly from it, but we can try to make sure they're consistent when both
--- llvm-3.8.0.src/lib/Target/ARM/ARMSubtarget.h.64bitLongs~	2016-01-05 13:51:59.000000000 +0100
+++ llvm-3.8.0.src/lib/Target/ARM/ARMSubtarget.h	2016-01-25 20:17:06.760685423 +0100
@@ -221,6 +221,9 @@ protected:
   /// Generate calls via indirect call instructions.
   bool GenLongCalls;
 
+  /// Force long to be a 64-bit type (RenderScript-specific)
+  bool UseLong64;
+
   /// Target machine allowed unsafe FP math (such as use of NEON fp)
   bool UnsafeFPMath;
 
--- llvm-3.8.0.src/lib/Target/ARM/ARM.td.64bitLongs~	2016-01-25 20:17:06.760685423 +0100
+++ llvm-3.8.0.src/lib/Target/ARM/ARM.td	2016-01-25 20:19:06.430698796 +0100
@@ -27,6 +27,11 @@ class Architecture<string fname, string
   : SubtargetFeature<fname, "ARMArch", aname,
                      !strconcat(aname, " architecture"), features>;
 
+// RenderScript-specific support for 64-bit long types on all targets
+def FeatureLong64 : SubtargetFeature<"long64", "UseLong64",
+                                     "true",
+                                     "long type is forced to be 64-bit">;
+
 //===----------------------------------------------------------------------===//
 // ARM Subtarget state.
 //
