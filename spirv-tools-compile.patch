diff -up llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_decorations.cpp.omv~ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_decorations.cpp
--- llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_decorations.cpp.omv~	2025-04-27 04:00:13.814544131 +0200
+++ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_decorations.cpp	2025-04-27 04:00:28.009335910 +0200
@@ -2178,6 +2178,7 @@ bool UsesExplicitLayout(ValidationState_
                 vstate, type_inst->GetOperandAs<uint32_t>(2), cache);
           }
         }
+	break;
         default:
           break;
       }
diff -up llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_interfaces.cpp.omv~ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_interfaces.cpp
--- llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_interfaces.cpp.omv~	2025-04-27 04:03:11.283664074 +0200
+++ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_interfaces.cpp	2025-04-27 04:03:19.783290583 +0200
@@ -664,6 +664,7 @@ spv_result_t ValidateStorageClass(Valida
                  << "with a Storage Class of Input or Output.";
         }
       }
+      break;
       default:
         break;
     }
diff -up llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp.omv~ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp
--- llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp.omv~	2025-04-27 04:04:00.918240347 +0200
+++ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp	2025-04-27 04:04:05.199575387 +0200
@@ -190,6 +190,7 @@ bool ContainsInvalidBool(ValidationState
         auto member_type = _.FindDef(member_type_id);
         if (ContainsInvalidBool(_, member_type, skip_builtin)) return true;
       }
+      break;
     default:
       break;
   }
diff -up llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp.omv~ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp
--- llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp.omv~	2025-04-27 04:02:53.737559007 +0200
+++ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp	2025-04-27 04:02:59.851336677 +0200
@@ -726,6 +726,7 @@ spv_result_t ValidateExecutionMode(Valid
                     "execution model.";
         }
       }
+      break;
     default:
       break;
   }
diff -up llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp.omv~ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp
--- llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp.omv~	2025-04-27 03:54:07.558856004 +0200
+++ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp	2025-04-27 03:54:24.337474559 +0200
@@ -61,6 +61,7 @@ spv_result_t PrimitivesPass(ValidationSt
                << ": expected Stream to be constant instruction";
       }
     }
+    break;
 
     default:
       break;
diff -up llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp.omv~ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp
--- llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp.omv~	2025-04-27 13:20:36.639336187 +0200
+++ llvm-project-llvmorg-20.1.3/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp	2025-04-27 13:20:54.672666521 +0200
@@ -232,6 +232,7 @@ void ConvertToSampledImagePass::FindUses
       case spv::Op::OpImageQuerySamples:
       case spv::Op::OpImageSparseFetch:
         uses->push_back(user);
+	break;
       default:
         break;
     }
diff -up llvm-project-llvmorg-20.1.8/llvm/projects/SPIRV-Tools/source/opt/upgrade_memory_model.cpp.omv~ llvm-project-llvmorg-20.1.8/llvm/projects/SPIRV-Tools/source/opt/upgrade_memory_model.cpp
--- llvm-project-llvmorg-20.1.8/llvm/projects/SPIRV-Tools/source/opt/upgrade_memory_model.cpp.omv~	2025-07-11 17:51:22.762044523 +0200
+++ llvm-project-llvmorg-20.1.8/llvm/projects/SPIRV-Tools/source/opt/upgrade_memory_model.cpp	2025-07-11 17:51:28.876420844 +0200
@@ -405,6 +405,7 @@ std::pair<bool, bool> UpgradeMemoryModel
 
         indices.push_back(constant_id);
       }
+      break;
     default:
       break;
   }
