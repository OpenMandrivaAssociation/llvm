diff -up llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp.omv~ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp
--- llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp.omv~	2023-01-12 20:22:29.085438581 +0100
+++ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/lint/divergence_analysis.cpp	2023-01-12 20:22:53.995578641 +0100
@@ -237,8 +237,10 @@ std::ostream& operator<<(std::ostream& o
       return os << "partially uniform";
     case DivergenceAnalysis::DivergenceLevel::kDivergent:
       return os << "divergent";
+#ifndef __clang__ // clang complains about unreachable code, gcc complains about missing return
     default:
       return os << "<invalid divergence level>";
+#endif
   }
 }
 
diff -up llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp.omv~ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp
--- llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp.omv~	2023-01-12 19:45:59.651556828 +0100
+++ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/opt/convert_to_sampled_image_pass.cpp	2023-01-12 19:46:04.871594686 +0100
@@ -233,6 +233,7 @@ void ConvertToSampledImagePass::FindUses
       case spv::Op::OpImageQuerySamples:
       case spv::Op::OpImageSparseFetch:
         uses->push_back(user);
+	break;
       default:
         break;
     }
diff -up llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp.omv~ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp
--- llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp.omv~	2023-01-12 19:18:30.549949586 +0100
+++ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_memory.cpp	2023-01-12 19:18:40.143354597 +0100
@@ -190,6 +190,7 @@ bool ContainsInvalidBool(ValidationState
         auto member_type = _.FindDef(member_type_id);
         if (ContainsInvalidBool(_, member_type, skip_builtin)) return true;
       }
+      break;
     default:
       break;
   }
diff -up llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp.omv~ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp
--- llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp.omv~	2023-01-12 19:32:28.682444291 +0100
+++ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_mode_setting.cpp	2023-01-12 19:32:42.275867913 +0100
@@ -572,6 +572,7 @@ spv_result_t ValidateExecutionMode(Valid
                     "execution model.";
         }
       }
+      break;
     default:
       break;
   }
diff -up llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp.omv~ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp
--- llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp.omv~	2023-01-12 19:40:07.615571806 +0100
+++ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_primitives.cpp	2023-01-12 19:40:23.905699857 +0100
@@ -63,6 +63,7 @@ spv_result_t PrimitivesPass(ValidationSt
                << ": expected Stream to be constant instruction";
       }
     }
+    break;
 
     default:
       break;
diff -up llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_ray_tracing_reorder.cpp.omv~ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_ray_tracing_reorder.cpp
--- llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_ray_tracing_reorder.cpp.omv~	2023-01-12 19:44:23.884189271 +0100
+++ llvm-project-15.0.7.src/llvm/projects/SPIRV-Tools/source/val/validate_ray_tracing_reorder.cpp	2023-01-12 19:44:33.920929996 +0100
@@ -615,6 +615,7 @@ spv_result_t RayReorderNVPass(Validation
                << "bits must be a 32-bit int scalar";
       }
     }
+    break;
 
     default:
       break;
