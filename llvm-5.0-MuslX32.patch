diff -up llvm-project-release-11.x/clang/lib/Driver/Driver.cpp.18~ llvm-project-release-11.x/clang/lib/Driver/Driver.cpp
--- llvm-project-release-11.x/clang/lib/Driver/Driver.cpp.18~	2020-07-28 13:47:17.000000000 +0200
+++ llvm-project-release-11.x/clang/lib/Driver/Driver.cpp	2020-07-28 20:01:06.362588146 +0200
@@ -505,14 +505,21 @@ static llvm::Triple computeTargetTriple(
       AT = Target.get64BitArchVariant().getArch();
       if (Target.getEnvironment() == llvm::Triple::GNUX32)
         Target.setEnvironment(llvm::Triple::GNU);
+      else if (Target.getEnvironment() == llvm::Triple::MuslX32)
+        Target.setEnvironment(llvm::Triple::Musl);
     } else if (A->getOption().matches(options::OPT_mx32) &&
                Target.get64BitArchVariant().getArch() == llvm::Triple::x86_64) {
       AT = llvm::Triple::x86_64;
-      Target.setEnvironment(llvm::Triple::GNUX32);
+      if (Target.getEnvironment() == llvm::Triple::Musl)
+        Target.setEnvironment(llvm::Triple::MuslX32);
+      else
+        Target.setEnvironment(llvm::Triple::GNUX32);
     } else if (A->getOption().matches(options::OPT_m32)) {
       AT = Target.get32BitArchVariant().getArch();
       if (Target.getEnvironment() == llvm::Triple::GNUX32)
         Target.setEnvironment(llvm::Triple::GNU);
+      else if (Target.getEnvironment() == llvm::Triple::MuslX32)
+        Target.setEnvironment(llvm::Triple::Musl);
     } else if (A->getOption().matches(options::OPT_m16) &&
                Target.get32BitArchVariant().getArch() == llvm::Triple::x86) {
       AT = llvm::Triple::x86;
diff -up llvm-project-release-11.x/clang/lib/Driver/ToolChains/Gnu.cpp.18~ llvm-project-release-11.x/clang/lib/Driver/ToolChains/Gnu.cpp
--- llvm-project-release-11.x/clang/lib/Driver/ToolChains/Gnu.cpp.18~	2020-07-28 20:01:06.344587929 +0200
+++ llvm-project-release-11.x/clang/lib/Driver/ToolChains/Gnu.cpp	2020-07-28 20:03:00.637953665 +0200
@@ -301,7 +301,7 @@ static const char *getLDMOption(const ll
   case llvm::Triple::systemz:
     return "elf64_s390";
   case llvm::Triple::x86_64:
-    if (T.getEnvironment() == llvm::Triple::GNUX32)
+    if (T.getEnvironment() == llvm::Triple::GNUX32 || T.getEnvironment() == llvm::Triple::MuslX32)
       return "elf32_x86_64";
     return "elf_x86_64";
   case llvm::Triple::ve:
@@ -724,7 +724,7 @@ void tools::gnutools::Assembler::Constru
     CmdArgs.push_back("--32");
     break;
   case llvm::Triple::x86_64:
-    if (getToolChain().getTriple().getEnvironment() == llvm::Triple::GNUX32)
+    if (getToolChain().getTriple().getEnvironment() == llvm::Triple::GNUX32 || getToolChain().getTriple().getEnvironment() == llvm::Triple::MuslX32)
       CmdArgs.push_back("--x32");
     else
       CmdArgs.push_back("--64");
@@ -1715,7 +1715,7 @@ static bool findBiarchMultilibs(const Dr
   // Determine default multilib from: 32, 64, x32
   // Also handle cases such as 64 on 32, 32 on 64, etc.
   enum { UNKNOWN, WANT32, WANT64, WANTX32 } Want = UNKNOWN;
-  const bool IsX32 = TargetTriple.getEnvironment() == llvm::Triple::GNUX32;
+  const bool IsX32 = (TargetTriple.getEnvironment() == llvm::Triple::GNUX32) || (TargetTriple.getEnvironment() == llvm::Triple::MuslX32);
   if (TargetTriple.isArch32Bit() && !NonExistent(Alt32))
     Want = WANT64;
   else if (TargetTriple.isArch64Bit() && IsX32 && !NonExistent(Altx32))
@@ -2348,7 +2348,7 @@ void Generic_GCC::GCCInstallationDetecto
     TripleAliases.append(begin(X86_64Triples), end(X86_64Triples));
     // x32 is always available when x86_64 is available, so adding it as
     // secondary arch with x86_64 triples
-    if (TargetTriple.getEnvironment() == llvm::Triple::GNUX32) {
+    if (TargetTriple.getEnvironment() == llvm::Triple::GNUX32 || TargetTriple.getEnvironment() == llvm::Triple::MuslX32) {
       BiarchLibDirs.append(begin(X32LibDirs), end(X32LibDirs));
       BiarchTripleAliases.append(begin(X86_64Triples), end(X86_64Triples));
     } else {
diff -up llvm-project-release-11.x/clang/lib/Driver/ToolChains/Linux.cpp.18~ llvm-project-release-11.x/clang/lib/Driver/ToolChains/Linux.cpp
--- llvm-project-release-11.x/clang/lib/Driver/ToolChains/Linux.cpp.18~	2020-07-28 20:01:06.344587929 +0200
+++ llvm-project-release-11.x/clang/lib/Driver/ToolChains/Linux.cpp	2020-07-28 20:01:06.363588158 +0200
@@ -91,6 +91,9 @@ std::string Linux::getMultiarchTriple(co
     if (TargetEnvironment != llvm::Triple::GNUX32 &&
         D.getVFS().exists(SysRoot + "/lib/x86_64-linux-gnu"))
       return "x86_64-linux-gnu";
+    else if (TargetEnvironment == llvm::Triple::GNUX32 &&
+        D.getVFS().exists(SysRoot + "/lib/x86_64-linux-gnux32"))
+      return "x86_64-linux-gnux32";
     break;
   case llvm::Triple::aarch64:
     if (IsAndroid)
@@ -542,7 +545,7 @@ std::string Linux::getDynamicLinker(cons
     Loader = "ld-linux.so.2";
     break;
   case llvm::Triple::x86_64: {
-    bool X32 = Triple.getEnvironment() == llvm::Triple::GNUX32;
+    bool X32 = (Triple.getEnvironment() == llvm::Triple::GNUX32) || (Triple.getEnvironment() == llvm::Triple::MuslX32);
 
     LibDir = X32 ? "libx32" : "lib64";
     Loader = X32 ? "ld-linux-x32.so.2" : "ld-linux-x86-64.so.2";
diff -up llvm-project-release-11.x/llvm/include/llvm/ADT/Triple.h.18~ llvm-project-release-11.x/llvm/include/llvm/ADT/Triple.h
--- llvm-project-release-11.x/llvm/include/llvm/ADT/Triple.h.18~	2020-07-28 13:47:17.000000000 +0200
+++ llvm-project-release-11.x/llvm/include/llvm/ADT/Triple.h	2020-07-28 20:01:06.363588158 +0200
@@ -213,6 +213,7 @@ public:
     Musl,
     MuslEABI,
     MuslEABIHF,
+    MuslX32,
 
     MSVC,
     Itanium,
@@ -671,7 +672,8 @@ public:
   bool isMusl() const {
     return getEnvironment() == Triple::Musl ||
            getEnvironment() == Triple::MuslEABI ||
-           getEnvironment() == Triple::MuslEABIHF;
+           getEnvironment() == Triple::MuslEABIHF ||
+           getEnvironment() == Triple::MuslX32;
   }
 
   /// Tests whether the target is SPIR (32- or 64-bit).
diff -up llvm-project-release-11.x/llvm/lib/Support/Triple.cpp.18~ llvm-project-release-11.x/llvm/lib/Support/Triple.cpp
--- llvm-project-release-11.x/llvm/lib/Support/Triple.cpp.18~	2020-07-28 13:47:17.000000000 +0200
+++ llvm-project-release-11.x/llvm/lib/Support/Triple.cpp	2020-07-28 20:01:06.363588158 +0200
@@ -244,6 +244,7 @@ StringRef Triple::getEnvironmentTypeName
   case Musl: return "musl";
   case MuslEABI: return "musleabi";
   case MuslEABIHF: return "musleabihf";
+  case MuslX32: return "muslx32";
   case Simulator: return "simulator";
   }
 
@@ -541,6 +542,7 @@ static Triple::EnvironmentType parseEnvi
     .StartsWith("android", Triple::Android)
     .StartsWith("musleabihf", Triple::MuslEABIHF)
     .StartsWith("musleabi", Triple::MuslEABI)
+    .StartsWith("muslx32", Triple::MuslX32)
     .StartsWith("musl", Triple::Musl)
     .StartsWith("msvc", Triple::MSVC)
     .StartsWith("itanium", Triple::Itanium)
diff -up llvm-project-release-11.x/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp.18~ llvm-project-release-11.x/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp
--- llvm-project-release-11.x/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp.18~	2020-07-28 13:47:17.000000000 +0200
+++ llvm-project-release-11.x/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp	2020-07-28 20:01:06.363588158 +0200
@@ -1593,7 +1593,7 @@ MCAsmBackend *llvm::createX86_64AsmBacke
 
   uint8_t OSABI = MCELFObjectTargetWriter::getOSABI(TheTriple.getOS());
 
-  if (TheTriple.getEnvironment() == Triple::GNUX32)
+  if (TheTriple.getEnvironment() == Triple::GNUX32 || TheTriple.getEnvironment() == Triple::MuslX32)
     return new ELFX86_X32AsmBackend(T, OSABI, STI);
   return new ELFX86_64AsmBackend(T, OSABI, STI);
 }
diff -up llvm-project-release-11.x/llvm/lib/Target/X86/MCTargetDesc/X86MCAsmInfo.cpp.18~ llvm-project-release-11.x/llvm/lib/Target/X86/MCTargetDesc/X86MCAsmInfo.cpp
--- llvm-project-release-11.x/llvm/lib/Target/X86/MCTargetDesc/X86MCAsmInfo.cpp.18~	2020-07-28 13:47:17.000000000 +0200
+++ llvm-project-release-11.x/llvm/lib/Target/X86/MCTargetDesc/X86MCAsmInfo.cpp	2020-07-28 20:01:06.363588158 +0200
@@ -81,7 +81,7 @@ void X86ELFMCAsmInfo::anchor() { }
 
 X86ELFMCAsmInfo::X86ELFMCAsmInfo(const Triple &T) {
   bool is64Bit = T.getArch() == Triple::x86_64;
-  bool isX32 = T.getEnvironment() == Triple::GNUX32;
+  bool isX32 = (T.getEnvironment() == Triple::GNUX32) || (T.getEnvironment() == Triple::MuslX32);
 
   // For ELF, x86-64 pointer size depends on the ABI.
   // For x86-64 without the x32 ABI, pointer size is 8. For x86 and for x86-64
diff -up llvm-project-release-11.x/llvm/lib/Target/X86/X86RegisterInfo.cpp.18~ llvm-project-release-11.x/llvm/lib/Target/X86/X86RegisterInfo.cpp
--- llvm-project-release-11.x/llvm/lib/Target/X86/X86RegisterInfo.cpp.18~	2020-07-28 13:47:17.000000000 +0200
+++ llvm-project-release-11.x/llvm/lib/Target/X86/X86RegisterInfo.cpp	2020-07-28 20:01:06.363588158 +0200
@@ -60,7 +60,7 @@ X86RegisterInfo::X86RegisterInfo(const T
     // This matches the simplified 32-bit pointer code in the data layout
     // computation.
     // FIXME: Should use the data layout?
-    bool Use64BitReg = TT.getEnvironment() != Triple::GNUX32;
+    bool Use64BitReg = (TT.getEnvironment() != Triple::GNUX32) && (TT.getEnvironment() != Triple::MuslX32);
     StackPtr = Use64BitReg ? X86::RSP : X86::ESP;
     FramePtr = Use64BitReg ? X86::RBP : X86::EBP;
     BasePtr = Use64BitReg ? X86::RBX : X86::EBX;
diff -up llvm-project-release-11.x/llvm/lib/Target/X86/X86Subtarget.h.18~ llvm-project-release-11.x/llvm/lib/Target/X86/X86Subtarget.h
--- llvm-project-release-11.x/llvm/lib/Target/X86/X86Subtarget.h.18~	2020-07-28 13:47:17.000000000 +0200
+++ llvm-project-release-11.x/llvm/lib/Target/X86/X86Subtarget.h	2020-07-28 20:01:06.364588170 +0200
@@ -591,12 +591,14 @@ public:
   /// Is this x86_64 with the ILP32 programming model (x32 ABI)?
   bool isTarget64BitILP32() const {
     return In64BitMode && (TargetTriple.getEnvironment() == Triple::GNUX32 ||
+                           TargetTriple.getEnvironment() == Triple::MuslX32 ||
                            TargetTriple.isOSNaCl());
   }
 
   /// Is this x86_64 with the LP64 programming model (standard AMD64, no x32)?
   bool isTarget64BitLP64() const {
     return In64BitMode && (TargetTriple.getEnvironment() != Triple::GNUX32 &&
+                           TargetTriple.getEnvironment() != Triple::MuslX32 &&
                            !TargetTriple.isOSNaCl());
   }
 
diff -up llvm-project-release-11.x/llvm/lib/Target/X86/X86TargetMachine.cpp.18~ llvm-project-release-11.x/llvm/lib/Target/X86/X86TargetMachine.cpp
--- llvm-project-release-11.x/llvm/lib/Target/X86/X86TargetMachine.cpp.18~	2020-07-28 13:47:17.000000000 +0200
+++ llvm-project-release-11.x/llvm/lib/Target/X86/X86TargetMachine.cpp	2020-07-28 20:01:06.364588170 +0200
@@ -110,7 +110,7 @@ static std::string computeDataLayout(con
   Ret += DataLayout::getManglingComponent(TT);
   // X86 and x32 have 32 bit pointers.
   if ((TT.isArch64Bit() &&
-       (TT.getEnvironment() == Triple::GNUX32 || TT.isOSNaCl())) ||
+       (TT.getEnvironment() == Triple::GNUX32 || TT.getEnvironment() == Triple::MuslX32 || TT.isOSNaCl())) ||
       !TT.isArch64Bit())
     Ret += "-p:32:32";
 
